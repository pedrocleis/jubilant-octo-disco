
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 211
#define YY_END_OF_BUFFER 212
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1293] =
    {   0,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,    0,    0,    0,    0,  199,  199,
        0,    0,  212,  210,  208,  209,  209,  107,  210,  105,
      107,  107,  107,  105,  106,  106,  107,  210,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   15,  107,  107,  107,  107,  107,  107,  107,
      167,  210,  165,  165,  165,  167,  165,  165,  167,  210,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  113,  210,
      109,  113,  113,  111,  110,  109,  113,  210,  113,  111,

      115,  115,  114,  115,  115,  115,  115,  182,  210,  177,
      178,  182,  169,  182,  180,  168,  172,  170,  171,  182,
      210,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  179,  187,  187,  187,  187,  187,
      185,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  208,  184,  210,  209,  193,  194,
      195,  188,  192,  197,  196,  198,  199,  200,  207,  201,
      206,  206,  202,  203,  201,  204,  205,  208,  107,    0,
      107,    0,    0,    0,  107,  107,  106,    0,  107,  107,
      107,  107,  107,  107,  107,   11,  107,  107,  107,  107,

      107,  107,   45,  107,  107,   79,  107,  107,  107,  107,
      107,  107,  107,   66,  107,  107,    5,  107,  107,  107,
      107,   14,  107,   78,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,   40,   76,  107,  107,  107,  107,
      107,  107,  107,  107,   80,  107,  107,  107,  107,  107,
      107,  107,  107,  107,    6,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  167,    0,  166,  167,    0,
        0,    0,  167,  167,  161,  164,  162,    0,  167,  167,
      167,  167,  167,  156,  167,  167,  167,  167,  155,  144,
      167,  167,  167,  167,  143,  167,  142,  167,  167,  167,

      167,  153,  167,  167,  167,  149,  167,  144,  167,  157,
      167,  167,  167,  167,  167,  116,  144,  167,  163,  113,
        0,  112,  113,    0,    0,    0,  113,  113,    0,  108,
      110,    0,    5,  208,  114,    0,    0,    0,    0,    0,
      182,    0,  181,  182,    0,    0,    0,  182,  182,  173,
        0,  182,  182,  182,  182,  182,  182,  182,  182,  175,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  174,  187,    0,  186,  187,    0,    0,    0,  187,
      187,    0,  187,  187,  187,  183,  187,  187,  183,  187,
      187,  187,  183,  183,  187,  187,  183,  187,  208,  184,

        0,    0,    0,  193,  189,  190,  191,  197,  199,  201,
      201,  107,    0,    2,    2,  107,  107,  107,   71,  107,
      107,  107,  107,  107,  107,   70,  107,  107,  107,  107,
      107,  107,  107,  107,   16,   79,  107,  107,  107,  107,
      107,  107,  107,   31,  107,  107,  107,  107,  107,  107,
      107,  107,   78,  107,  107,    6,   29,  107,  107,  107,
       41,  107,   76,  107,  107,  107,  107,  107,  107,   10,
      107,  102,   19,  107,  107,   22,   80,  107,  107,  107,
       38,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,   77,  107,  107,  107,  107,  107,

      107,  107,  167,    0,    2,    2,  167,  167,  154,  167,
      167,  158,  167,  167,  167,  167,  167,  167,  167,  167,
      121,  167,  144,  167,  159,  167,  167,  167,  167,  167,
      167,  137,  136,  167,  150,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  152,  113,    0,    2,    2,
        0,    0,    0,    0,    2,    2,  182,    0,    2,    2,
      182,  182,  182,  182,  182,  182,  182,  182,  176,  182,
      182,  182,  182,  182,  182,  182,  176,  182,  182,  182,
      182,  182,  187,    0,    2,    2,  187,  187,  187,  183,
      183,  187,  187,  187,  187,  183,    0,    0,    0,    0,

        2,    2,    2,    1,    2,    2,  107,  107,  107,   57,
       47,  107,  107,  107,  107,  107,  107,  107,  107,   54,
       28,  107,   20,  107,  107,   95,   23,  107,  107,   62,
      107,   24,  107,  107,  107,  107,  107,    9,   27,  107,
        3,  107,  107,  107,  107,   18,  107,    7,  107,  107,
       98,   13,  107,  107,  107,  107,   15,  107,  107,  107,
      107,  107,   80,  107,  107,   39,  107,   75,   21,   25,
      107,   93,  107,  107,  103,   67,  107,  107,  107,  107,
       77,  107,    8,  107,  107,   63,  107,  107,    0,    0,
        2,    2,    2,    1,    2,    2,  167,  167,  120,  167,

      167,  132,  167,  167,  159,  167,  167,  160,  167,  167,
      117,  167,  167,  167,  122,  167,  167,  123,  167,  167,
      124,    3,  167,  167,  151,  167,  167,  131,  126,  167,
      167,  145,  167,  167,  167,  167,  167,  167,  152,    0,
        0,    2,    2,    2,    1,    2,    2,    0,    0,    1,
        0,    0,    2,    2,    2,    1,    2,    2,  182,  176,
      182,  182,  182,  182,  182,  182,  176,  182,  176,  182,
      182,  182,  182,  176,  176,  182,  182,  182,    0,    0,
        2,    2,    2,    1,    2,    2,  187,  187,  183,  183,
      187,  187,  187,  187,  187,  183,  187,  187,  187,    2,

        2,    1,    1,    1,    1,    1,    2,    2,    2,   92,
      107,   65,  107,   96,  107,   26,   46,   59,  107,  107,
      107,  107,  107,  107,   84,  107,   89,  107,  107,  107,
      107,  107,  107,  107,   60,  107,  107,   82,   99,   34,
      107,  107,  107,  107,  107,  107,   64,   17,   56,  107,
      107,   12,  107,  107,  107,  107,  107,  107,  107,  107,
       75,  107,  107,   68,   55,  107,  107,   42,   37,  107,
      107,   74,   94,   49,  107,  107,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,  119,  147,  167,  167,
      167,  138,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  118,  133,  167,  167,  167,  167,  167,  167,
      167,  125,  145,  167,  129,  167,  167,  167,  144,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,  176,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  176,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,  183,  187,  187,  187,
      187,  187,  187,    1,    1,    1,    1,    1,    2,    2,
       43,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,   86,  107,    4,  107,

      107,  107,   99,   61,   73,   29,  107,  107,  101,   64,
      107,  107,  107,  107,   19,   91,   53,  107,   36,   50,
      107,  107,  107,  107,  107,   69,  107,  107,  107,   35,
        1,    1,    1,    1,    1,    2,    2,  167,  167,  135,
      167,  167,    4,  130,  127,  167,  167,  167,  167,  167,
      167,  167,  136,  167,  167,  167,  167,  167,  167,  167,
      167,  167,    1,    1,    1,    1,    1,    2,    2,    1,
        1,    1,    1,    1,    2,    2,  182,  182,  176,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,    1,
        1,    1,    1,    1,    2,    2,  187,  187,  187,  187,

      187,  187,    1,    1,  107,   65,  107,  107,   48,   83,
      107,   52,  107,  107,   20,  107,  107,   88,  107,  107,
       87,  107,   72,   58,  107,  107,  100,   85,  107,   22,
      107,   21,  107,  107,   81,   33,   44,  107,    1,    1,
      167,  167,  167,  167,  167,  139,  167,  167,  167,  167,
      137,  167,  140,  167,  167,  167,  134,  167,  167,  146,
      167,    1,    1,    1,    1,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,    1,    1,  187,  187,
      187,  187,  183,  107,  107,  107,   83,  107,  107,   28,
       51,   23,  107,   24,  107,  107,  107,  102,  107,   25,

      107,   32,  107,  167,  167,  167,  167,  167,  167,  167,
      167,  123,  128,  167,  167,  167,  129,  148,  146,  167,
      182,  182,  182,  182,  182,  182,  182,  182,  187,  187,
      187,  183,  107,   57,   97,  107,   54,   62,  107,   18,
      107,  107,  107,   30,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  141,  182,  182,  182,  182,  182,  182,
      182,  187,  187,  107,  107,  104,  107,  167,  167,  167,
      167,  122,  167,  126,  148,  182,  182,  182,  182,  182,
       90,  107,  119,  120,  167,  131,  182,   55,  167,  182,
      135,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1380] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  680, 8609,  174, 8609, 8609,  309,  317, 8609,
      341, 8609,  361,  371,  373,  375,  379,  392,  385,  411,
      472,  423,  441,  449,  431,  483,  494,  505,  508,  528,
      532,  536,  542,  561,  579,  570,  572,  602,  581,  610,
      496,  321, 8609,  622,  630,  636,  644,  650,  656,  663,
      670,  709,  674,  688,  682,  685,  747,  711,  733,  758,
      769,  782,  790,  793,  796,  745,  804,  827,  829,  324,
     8609,  835,  841,  866,  868,  833,  871,  888,  879, 8609,

     8609,  911, 8609,  925,  941,  666,  652,  941,  366, 8609,
     8609,  943, 8609,  945,  949,  963,  969, 8609, 8609,  967,
      986,  989,  995,  993, 1007, 1028, 1033, 1041, 1055, 1066,
     1079, 1081, 1087, 1036, 8609, 8609, 1092,  372, 1110, 1112,
     1115, 1123, 1132, 1178, 1113, 1149, 1151, 1155, 1181, 1186,
     1189, 1209, 1215, 1217, 1259, 8609, 1273, 1287,    0, 8609,
     8609, 8609,  492,    0, 8609, 8609,    0, 8609, 8609,    0,
     8609, 8609, 8609, 8609,  692, 8609, 8609,  188,  417,  430,
      615, 1259,  442,  405,  680, 1084, 1211, 1286,  837,  756,
     1289,  955,  881, 1004,  899,  913, 1223, 1278, 1136, 1296,

     1292, 1316, 1089, 1307, 1322, 1340, 1342, 1346, 1351, 1354,
     1344, 1365, 1372, 1374, 1377, 1384, 1392, 1399, 1404, 1406,
     1410, 1413, 1424, 1431, 1433, 1436, 1438, 1456, 1458, 1462,
     1464, 1466, 1469, 1471, 1484, 1489, 1495, 1502, 1507, 1504,
     1510, 1528, 1499, 1534, 1541, 1543, 1546, 1549, 1552, 1571,
     1576, 1578, 1585, 1591, 1597, 1603, 1605, 1609, 1612, 1624,
     1632, 1634, 1636, 1655, 1646, 1658,  450, 1660, 1678, 1686,
      463,  415, 1689, 1697, 1693, 1708, 1711, 1721, 1732, 1735,
     1737, 1740, 1760, 1763, 1771, 1782, 1785, 1796, 1804, 1808,
     1816, 1827, 1819, 1831, 1850, 1854, 1862, 1865, 1868, 1873,

     1886, 1888, 1876, 1901, 1914, 1916, 1919, 1927, 1938, 1940,
     1951, 1953, 1964, 1966, 1972, 1977, 1995, 1997, 2001, 2003,
      495, 2009, 2022, 2035,  515,  466, 2027, 2045, 2060, 8609,
     2060, 2069, 2078, 2093, 8609, 2109,  646,  627,  620,  585,
     2093,  517, 2101, 2116, 2124,  519,  545, 2127, 2135, 2131,
     2144, 2154, 2156, 2160, 2158, 2184, 2196, 2198, 2210, 2222,
     2224, 2236, 2242, 2244, 2247, 2250, 2262, 2268, 2276, 2282,
     2294, 2296, 2302,  543, 2307, 2315, 2325,  621,  591, 2334,
     2336, 2343,  968, 2347, 2355, 2359, 2361, 2379, 2382, 2385,
     2397, 2408, 2410, 2421, 2423, 2435, 2443, 2448, 2478, 8609,

     2492,  579,  569,    0, 8609, 8609, 8609,    0,    0,    0,
     8609, 1729,  641, 2507, 2561, 1758, 1974, 2162, 1860, 2270,
     2166, 2445, 2477, 2480, 2510, 2081, 2501, 2513, 2521, 2548,
     2515, 2554, 2567, 2569, 2367, 2580, 2582, 2587, 2591, 2593,
     2611, 2601, 2619, 2621, 2623, 2625, 2629, 2644, 2633, 2647,
     2653, 2657, 2662, 2666, 2671, 2675, 2680, 2685, 2689, 2693,
     2700, 2704, 2707, 2711, 2718, 2729, 2722, 2732, 2740, 2742,
     2744, 2751, 2754, 2762, 2766, 2773, 2780, 2785, 2787, 2793,
     2795, 2813, 2816, 2818, 2823, 2825, 2827, 2838, 2831, 2845,
     2852, 2856, 2863, 2870, 2874, 2885, 2881, 2892, 2895, 2903,

     2899, 2906, 2918,  645, 2952, 3006, 2929, 2955, 2932, 2963,
     2010, 2966, 3009, 2978, 3006, 3017, 3040, 3046, 3048, 3052,
     3067, 3071, 3075, 3079, 3090, 3093, 3105, 3113, 3116, 3118,
     3124, 3136, 3139, 3151, 3157, 3162, 3170, 3175, 3181, 3193,
     3201, 3207, 3215, 3220, 3226, 3238, 3246,  710, 3283, 3337,
      570,  561,  553,  541,  523,  504, 3249,  720, 3391, 3445,
     3260, 3252, 3286, 3301, 3297, 3264, 3324, 3348, 3359, 3371,
     3409, 3363, 3405, 3411, 3413, 3448, 3417, 3456, 3467, 3469,
     3475, 3493, 3496,  721, 3522, 3576, 3525, 3622, 3499, 3533,
     3536, 3547, 3558, 3580, 3594, 3598,  495,  485,  753,  600,

        0,  475, 3635, 3670,  364, 3724, 3128, 3289, 3415, 2958,
     2960, 2986, 3569, 3330, 3602, 3607, 3502, 3631, 2988, 3454,
     3650, 3664, 3488, 3345, 3528, 3673, 3677, 3679, 3682, 3691,
     3688, 3718, 3727, 3732, 3730, 3738, 3742, 3745, 3750, 3756,
     3760, 3763, 3775, 3778, 3782, 3784, 3790, 3797, 3803, 3805,
     3809, 3815, 3823, 3828, 3830, 3841, 3833, 3848, 3851, 3853,
     3856, 3859, 3861, 3879, 3884, 3886, 3889, 3891, 3893, 3898,
     3912, 3918, 3920, 3922, 3926, 3930, 3944, 3949, 3951, 3956,
     3953, 3962, 3964, 3982, 3985, 3989, 3992, 3995,  757,  619,
      453, 4021,  442, 4044,  450, 4098, 4017, 4031, 4025, 4055,

     4058, 4066, 4069, 4080, 4102, 4105, 4120, 4123, 4131, 4134,
     4149, 4153, 4157, 4161, 4180, 4182, 4184, 4188, 4207, 4209,
     4211, 4230, 4235, 4238, 4232, 4256, 4258, 4261, 4264, 4282,
     4285, 4293, 4307, 4311, 4296, 4319, 4337, 4339, 4342,  787,
      719,  440, 4369,  423, 4392,  468, 4446,  429,  423,    0,
      791,  766,  398, 4381,  391, 4500,  552, 4554, 4396, 4404,
     4417, 4415, 4423, 4449, 4428, 4453, 4464, 4472, 4503, 4477,
     4522, 4526, 4541, 4565, 4568, 4576, 4580, 4594,  856,  830,
      388, 4622,  362, 4645,  667, 4699, 4602, 1028, 4616, 4627,
     4648, 4656, 4667, 4659, 4670, 4702, 4706, 4710, 4724, 4754,

     1355,    0, 4777, 4766,  332, 4831, 4783,  320, 4810, 4091,
     4482, 4186, 4315, 4155, 4217, 4267, 4372, 4385, 4535, 4457,
     4608, 4612, 4720, 4734, 4410, 4508, 4562, 4795, 4679, 4739,
     4770, 4797, 4783, 4825, 4588, 4818, 4840, 4837, 4843, 4845,
     4849, 4852, 4855, 4867, 4864, 4870, 4885, 4891, 4894, 4896,
     4899, 4914, 4917, 4920, 4923, 4927, 4935, 4938, 4941, 4949,
     4953, 4959, 4964, 4967, 4977, 4982, 4985, 4988, 4991, 4995,
     4997, 5006, 5015, 5018, 5020, 5024, 5050, 5059, 5073, 5084,
        0,  313, 5127, 5057, 5181, 5099, 5104, 5093, 5108, 5131,
     5134, 5146, 5149, 5168, 5192, 5200, 5195, 5203, 5206, 5227,

     5233, 5239, 5241, 5245, 5263, 5265, 5268, 5286, 5290, 5292,
     5294, 5312, 5316, 5320, 5324, 5335, 5343, 5347, 5349, 5375,
     5166, 5398, 5387,    0,  306, 5452, 5405, 5506, 5424, 5434,
     5466, 5560, 5478, 5614,  296, 5668, 5480, 5722, 5491, 5510,
     5531, 5439, 5528, 5542, 5487, 5564, 5578, 5586, 5591, 5617,
     5632, 5635, 5671, 5640, 5637, 5675, 5701, 5712, 5776, 5733,
     5830,  289, 5884, 5740, 5938, 5751, 5757, 5780, 5794, 5802,
     5833, 5702, 5848, 5859, 5868, 5867, 5992, 5895, 5910, 5921,
     5030, 5499, 5345, 5392, 5537, 5566, 5782, 5044, 5790, 5572,
     5800, 5904, 5941, 5906, 5931, 5944, 5540, 5918, 5956, 5959,

     5964, 5985, 5962, 5974, 5995, 5998, 6003, 6006, 6010, 6013,
     6017, 6024, 6028, 6035, 6038, 6043, 6047, 6050, 6057, 6061,
     6068, 6071, 6075, 6079, 6081, 6083, 6089, 6102, 6094, 6104,
     6135, 6144, 6139,    0, 6153, 6163, 6176, 6172, 6175, 6143,
     6178, 6180, 6115, 6198, 6201, 6203, 6221, 6223, 6225, 6227,
     6245, 6247, 6259, 6265, 6270, 6273, 6285, 6291, 6297, 6299,
     6310, 6312, 6338, 6347, 6348,    0, 6362, 6372, 6385, 6389,
     6402, 6397,    0, 6413, 6422, 6431, 6421, 6433, 6445, 6447,
     6453, 6458, 6471, 6482, 6484, 6496, 6502, 6510, 6516, 6543,
     6513, 6543,    0, 6554, 6567, 6577, 6566, 6577, 6579, 6590,

     6592, 6604, 6624, 6620, 6623, 6358, 6418, 6534, 6456, 6626,
     6629, 6631, 6634, 6636, 6654, 6656, 6659, 6662, 6667, 6669,
     6680, 6682, 6688, 6690, 6692, 6694, 6701, 6712, 6714, 6720,
     6722, 6724, 6732, 6734, 6742, 6744, 6746, 6752, 6778, 6793,
     6782, 6790, 6793, 6795, 6801, 6813, 6824, 6826, 6838, 6844,
     6850, 6856, 6864, 6870, 6875, 6878, 6883, 6898, 6901, 6909,
     6912, 6938, 6929, 6955, 6964, 6954, 6960, 6965, 6968, 6973,
     6986, 6992, 6994, 6998, 7016, 7018, 7029, 7044, 7041, 7045,
     7049, 7063, 7067, 6836, 7069, 7071, 6805, 7073, 7077, 7081,
     7095, 7100, 7104, 7106, 7113, 7118, 7126, 7128, 7132, 7137,

     7139, 7141, 7147, 7165, 7167, 7161, 7173, 7185, 7188, 7196,
     7200, 7211, 7214, 7222, 7225, 7233, 7236, 7244, 7255, 7258,
     7263, 7276, 7278, 7281, 7284, 7303, 7305, 7307, 7309, 7328,
     7331, 7334, 7337, 7342, 7349, 7355, 7360, 7363, 7367, 7369,
     7378, 7387, 7389, 7392, 7407, 7410, 7413, 7421, 7418, 7440,
     7445, 7458, 7463, 7469, 7471, 7477, 7489, 7491, 7495, 7513,
     7518, 7521, 7536, 7531, 7533, 7416, 7541, 7544, 7563, 7567,
     7571, 7575, 7594, 7596, 7600, 7602, 7615, 7623, 7626, 7628,
     7443, 7634, 7646, 7652, 7657, 7660, 7671, 7581, 7675, 7679,
     7683, 8609, 7719, 7730, 7741, 7752, 7763, 7770, 7780, 7787,

     7797, 7804, 7814, 7821, 7831, 7838, 7848, 7859, 7870, 7881,
     7891, 7897, 7904, 7911, 7918, 7925, 7935, 7946, 7956, 7967,
     7977, 7988, 7999, 8009, 8020, 8030, 8041, 8052, 8063, 8074,
     8085, 8096, 8107, 8118, 8129, 8140, 8151, 8162, 8173, 8184,
     8195, 8206, 8217, 8228, 8239, 8250, 8261, 8272, 8283, 8294,
     8301, 8312, 8323, 8334, 8345, 8356, 8367, 8378, 8389, 8400,
     8411, 8418, 8429, 8440, 8451, 8462, 8473, 8484, 8491, 8502,
     8513, 8524, 8535, 8546, 8553, 8564, 8575, 8586, 8597
    } ;

static yyconst flex_int16_t yy_def[1380] =
    {   0,
     1292,    1, 1292,    3, 1292,    5, 1293, 1293, 1292,    9,
     1292,   11,   11,   13, 1294, 1294, 1295, 1295, 1296, 1296,
     1297, 1297, 1292, 1292, 1292, 1292, 1292, 1298, 1299, 1292,
     1298, 1292, 1298, 1298, 1298, 1298, 1298, 1292, 1298, 1298,
     1298, 1298, 1298,   41, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298,   41, 1298, 1298, 1298, 1298, 1298,
     1300, 1301, 1292, 1300, 1300, 1300, 1300, 1300, 1300, 1292,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1302, 1303,
     1292, 1302, 1302, 1302, 1302, 1302, 1302, 1292, 1302, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1304, 1305, 1292,
     1292, 1304, 1292, 1304, 1304, 1304, 1304, 1292, 1292, 1304,
     1292, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1292, 1292, 1306, 1307, 1306, 1306,
     1306, 1306, 1292, 1306,  144, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1292, 1292, 1292, 1292, 1308, 1292,
     1292, 1292, 1292, 1309, 1292, 1292, 1310, 1292, 1292, 1311,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1298, 1299,
     1298, 1312, 1299, 1299, 1298, 1298, 1298, 1292, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,

     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1300, 1301, 1300, 1300, 1313,
     1301, 1301, 1300, 1300, 1300, 1300, 1300, 1292, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,

     1300, 1300,   77, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1302,
     1303, 1302, 1302, 1314, 1303, 1303, 1302, 1302, 1292, 1292,
     1302, 1292, 1302, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1304, 1305, 1304, 1304, 1315, 1305, 1305, 1304, 1304, 1304,
     1292, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1306, 1307, 1306, 1306, 1316, 1307, 1307, 1306,
     1306, 1292,  144, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1292, 1292,

     1292, 1292, 1292, 1308, 1292, 1292, 1292, 1309, 1310, 1311,
     1292, 1298, 1317, 1318, 1318, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,

     1298, 1298, 1300, 1319, 1320, 1320, 1300, 1300, 1300, 1300,
       77, 1300, 1300, 1300,   77, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1302, 1321, 1322, 1322,
     1292, 1292, 1292, 1292, 1323, 1323, 1304, 1324, 1325, 1325,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1306, 1326, 1327, 1327, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1292, 1292, 1317, 1317,

     1323,  415, 1328, 1329,  415, 1330, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1319, 1319,
      506, 1331,  506, 1332,  506, 1333, 1300, 1300, 1300, 1300,

     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1321,
     1321,  550, 1334,  550, 1335,  550, 1336, 1292, 1292, 1337,
     1324, 1324,  560, 1338,  560, 1339,  560, 1340, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1326, 1326,
      586, 1341,  586, 1342,  586, 1343, 1306,  588, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1328,

     1328, 1337, 1329, 1344,  803, 1345, 1323,  415, 1346, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1331, 1331, 1332, 1347,
      879,  879, 1348, 1323, 1349, 1350, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,

     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1334,
     1334, 1335, 1352,  922,  922, 1353, 1323, 1354, 1355, 1356,
     1356, 1357, 1358, 1357,  934, 1359, 1323, 1360, 1361, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363, 1364, 1365,
     1364,  961, 1366, 1323, 1367, 1368, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1370, 1370, 1371, 1372, 1373, 1374, 1374,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,

     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1347, 1347, 1371,  879, 1376, 1350, 1350, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1352, 1352, 1371,  922, 1377, 1355, 1355, 1358,
     1358, 1371,  934, 1378, 1361, 1361, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1365,
     1365, 1371,  961, 1379, 1368, 1368, 1369, 1369, 1369, 1369,

     1369, 1369, 1373, 1373, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1376, 1376,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1377, 1377, 1378, 1378, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1379, 1379, 1369, 1369,
     1369, 1369, 1369, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,

     1375, 1375, 1375, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1369, 1369,
     1369, 1369, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1369, 1369, 1375, 1375, 1375, 1375, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1362, 1362, 1362, 1362, 1362,
     1375, 1375, 1351, 1351, 1351, 1351, 1362, 1375, 1351, 1362,
     1351,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292
    } ;

static yyconst flex_int16_t yy_nxt[8666] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1092,  160,  161,  180,  161,  160,
      160, 1072,  162,  160,  161,  179,  161,  160,  160,  266,
      162, 1065,  320,  181,  182,  137,  163,  137, 1033,  184,
      602,  137,  137,  272,  163,  137,  326,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  976,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  341,  186,  169,  173,  174,  180,
      373,  180,  781,  180,  602,  181,  182,  180,  347,  807,
      175,  187,  187,  180,  379,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181, 1292,  183,  781,  181,
      182,  753,  189,  181,  190,  181, 1292,  271,  753,  180,
      176,  177,  191,  169,  169,  180,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182,  330,  179,  180,
      330,  181,  182,  742,  181,  181,  175,  181,  182,  180,
      179,  193,  184,  202,  194,  181,  182,  195,  266,  214,
      742,  215,  691,  203,  184,  181,  182, 1292,  325,  204,
      691,  266,  272,  691,  216,  884,  176,  177,  179,  169,
      180,  205,  179,  206,  207,  272,  209,  210,  742,  211,
      208,  180,  212,  927,  213,  602,  181,  182,  405,  400,

      406,  196,  180,  320,  267,  197,  400,  181,  182,  198,
      199,  268,  200,  180,  407,  201,  180,  326,  181,  182,
      269,  270,  217,  320,  750,  341,  218,  341,  219,  181,
      182,  220,  181,  182,  223,  224,  180,  326,  225,  347,
      180,  347,  226,  750,  180,  221, 1292,  346,  227,  222,
      180,  373,  181,  182,  228,  335,  181,  182,  229,  232,
      181,  182,  237,  233,  335,  379,  181,  182,  230,  180,
      234,  235,  753,  236,  231,  749,  238,  937,  180,  239,
      180,  748,  240,  598,  241,  181,  182,  243,  242,  180,
      597,  244, 1292,  378,  181,  182,  181,  182,  245,  556,

      254, 1292,  599,  255,  256,  181,  182,  246,  179,  247,
      180,  258,  248,  257,  262,  263,  179,  249,  180,  250,
     1292,  689,  251,  180,  252,  253,  181,  182,  259,  373,
      267,  555,  260,  273,  181,  182,  261,  268,  267,  181,
      188,  554,  264,  379,  267,  268,  269,  270,  265,  412,
      274,  268,  267,  503,  269,  270,  275,  553,  267,  268,
      269,  270,  276,  600,  267,  268,  340,  690,  269,  270,
      277,  268,  269,  269,  269,  270,  269,  339,  267, 1292,
      269,  278,  267, 1292,  269,  268,  269,  781,  180,  268,
      267,  414,  964,  267,  269,  270,  267,  268,  269,  270,

      268,  411,  411,  268,  181,  182,  269,  270,  287,  269,
      270,  293,  269,  270,  279,  269,  269,  267,  547,  267,
     1292,  740,  291, 1292,  268,  292,  268,  288,  557,  583,
      289, 1292,  741,  269,  270,  269,  270,  290,  299,  280,
     1292,  267,  752,  780,  411,  411,  281,  282,  268,  283,
     1292,  284,  285,  267,  286,  267, 1292,  269,  270,  300,
      268,  412,  268,  301,  180,  503,  267, 1292,  751,  269,
      270,  269,  270,  268, 1292,  600,  294,  267,  295,  690,
      181,  182,  269,  270,  268,  302,  296, 1292,  303,  317,
      267,  297,  298,  269,  270,  547,  305,  268,  267,  557,

     1292,  267,  304,  417,  267,  268,  269,  270,  268,  741,
      306,  268,  267,  752,  269,  270, 1292,  269,  270,  268,
      269,  270,  307, 1292,  309,  308,  315,  310,  269,  270,
      318, 1292,  779,  311,  312,  267,  316,  321,  313,  314,
     1292,  321,  268,  321,  322,  180,  327,  319,  322,  321,
      322,  269,  270,  323,  324,  328,  322,  323,  324,  323,
      324,  181,  182, 1292,  583,  323,  324,  329,  330,  329,
      329,  329,  329, 1292,  321, 1292,  321,  416,  780,  321,
     1292,  322, 1292,  322,  331,  331,  322,  321, 1292,  180,
      323,  324,  323,  324,  322,  323,  332,  323,  323, 1292,

     1292,  323, 1292,  323,  324,  181,  182,  180, 1292,  323,
      421,  323,  334,  335,  336,  336,  334,  334,  333, 1292,
     1292,  180,  337,  181,  182,  338,  336,  335,  336,  336,
      336,  336, 1292,  423, 1292, 1292,  337,  181,  182,  338,
      323,  323,  336,  335,  336,  336,  336,  336, 1292,  342,
     1292,  342,  337,  342,  348,  338,  343,  342,  343,  349,
      343, 1292, 1292,  180,  343,  344,  345,  344,  345,  344,
      345,  342, 1292,  344,  345,  342, 1292,  342,  343,  181,
      182, 1292,  343, 1292,  343, 1292, 1292,  344,  345,  350,
     1292,  344,  351,  344,  345,  344,  344,  342,  373,  344,

      420,  342, 1292,  342,  343,  373,  373,  344,  343,  344,
      343,  373,  180,  344,  345,  342, 1292,  344,  345,  344,
      345, 1292,  343, 1292, 1292, 1292, 1292,  355,  181,  182,
     1292,  344,  345,  352,  422,  353,  342, 1292,  344,  344,
      354,  342, 1292,  343,  342, 1292, 1292,  356,  343,  342,
      357,  343,  344,  345,  358, 1292,  343,  344,  345,  373,
      344,  345,  359,  342,  360,  344,  345,  362,  373, 1292,
      343,  363,  373,  968,  342,  373,  372, 1292,  361,  344,
      345,  343, 1292, 1292, 1292,  364, 1292,  342, 1292,  342,
      344,  345,  180,  366,  343,  342,  343,  180,  415,  365,

      374, 1292,  343,  344,  345,  344,  345,  375,  181,  182,
     1292,  344,  345,  181,  182,  369,  376,  377,  374,  367,
      374,  380,  368,  374, 1292,  375,  381,  375,  370, 1292,
      375,  374,  371, 1292,  376,  377,  376,  377,  375,  376,
      377,  376,  376,  373,  180,  376, 1292,  376,  382, 1292,
      373,  373,  388,  376, 1292,  376,  373,  374, 1292,  374,
      181,  182,  389,  374,  375,  426,  375, 1292, 1292, 1292,
      375, 1292, 1292,  376,  377,  376,  377, 1292,  391,  376,
      377, 1292,  386, 1292,  376,  376,  374, 1292,  390,  374,
     1292, 1292, 1292,  375,  374, 1292,  375,  374, 1292,  392,

     1292,  375,  376,  377,  375,  376,  377, 1292,  383, 1292,
      376,  377, 1292,  376,  377,  384,  385,  374, 1292,  180,
      386,  387,  393,  374,  375,  374,  386,  187,  187,  394,
      375,  180,  375,  376,  377,  181,  182, 1292, 1292,  376,
      377,  376,  377,  398, 1292, 1292, 1292,  181,  182,  395,
     1292, 1292, 1292,  424, 1292,  396, 1292, 1292, 1292,  397,
      399,  400,  401,  401,  399,  399, 1292,  413,  181,  181,
      402, 1292,  181,  403,  401,  400,  401,  401,  401,  401,
      181, 1292,  181, 1292,  402, 1292,  180,  403,  401,  400,
      401,  401,  401,  401, 1292,  181,  181,  180,  402,  181,

      180,  403,  181,  182,  180, 1292, 1292,  181,  425,  181,
     1292,  181,  181,  181,  182,  180,  181,  182, 1292, 1292,
      181,  182,  431,  418,  180, 1292,  419, 1292, 1292, 1292,
      180,  181,  182,  427,  428,  429, 1292, 1292,  181,  181,
      181,  182,  430,  432, 1292,  434,  181,  182,  180, 1292,
      180, 1292,  180,  435,  180,  601, 1292,  183,  601,  180,
      433,  183,  180, 1292,  181,  182,  181,  182,  181,  182,
      181,  182,  437,  180,  438,  181,  182,  440,  181,  182,
      180, 1292,  180, 1292,  436,  180, 1292,  442, 1292,  181,
      182,  439,  180, 1292,  441,  443,  181,  182,  181,  182,

      180,  181,  182, 1292, 1292,  255, 1292,  180,  181,  182,
      445, 1292,  180, 1292,  180, 1292,  181,  182,  180, 1292,
      446,  180,  444,  181,  182, 1292, 1292, 1292,  181,  182,
      181,  182,  180,  449,  181,  182,  450,  181,  182,  180,
     1292,  180,  447,  448,  180, 1292,  180, 1292,  181,  182,
      451, 1292, 1292, 1292, 1292,  181,  182,  181,  182, 1292,
      181,  182,  181,  182,  180, 1292,  180,  456, 1292,  452,
      180,  454,  180, 1292,  180,  453, 1292,  180, 1292,  180,
      181,  182,  181,  182, 1292,  455,  181,  182,  181,  182,
      181,  182,  180,  181,  182,  181,  182,  180, 1292,  457,

      461,  255,  460,  180, 1292,  459,  458,  180,  181,  182,
      180,  462,  180,  181,  182,  180, 1292, 1292,  180,  181,
      182, 1292, 1292,  181,  182, 1292,  181,  182,  181,  182,
     1292,  181,  182,  463,  181,  182,  180, 1292,  464,  470,
      465,  467,  180,  466,  472, 1292, 1292,  468,  469,  180,
     1292,  180,  181,  182,  180, 1292, 1292,  180,  181,  182,
      180, 1292,  471,  473, 1292,  181,  182,  181,  182, 1292,
      181,  182,  479,  181,  182, 1292,  181,  182,  474,  180,
      478,  475,  476,  480,  180,  477,  180, 1292, 1292,  482,
     1292,  481,  483,  180, 1292,  181,  182,  484, 1292,  180,

      181,  182,  181,  182,  487,  180,  486, 1292,  488,  181,
      182,  180,  489,  180,  485,  181,  182,  180, 1292, 1292,
      180,  181,  182,  490, 1292, 1292, 1292,  181,  182,  181,
      182,  493,  180,  181,  182,  491,  181,  182, 1292, 1292,
      180,  492,  180,  494,  180, 1292, 1292, 1292,  181,  182,
     1292, 1292, 1292, 1292,  180,  495,  181,  182,  181,  182,
      181,  182,  497,  180,  498, 1292,  267,  496,  267,  501,
      181,  182,  502,  268,  499,  268, 1292, 1292, 1292,  181,
      182,  500,  269,  270,  269,  270,  267, 1292, 1292, 1292,
     1292, 1292, 1292,  268,  504,  269,  269,  267, 1292,  269,

      505,  267,  269,  278,  268,  267, 1292,  269,  268,  269,
     1292,  506,  268,  269,  270, 1292,  267,  269,  270,  267,
     1292,  269,  270,  268, 1292, 1292,  268, 1292, 1292, 1292,
      269,  269,  269,  270,  269,  269,  270,  180,  269,  269,
      267, 1292,  269,  267,  269,  267, 1292,  268,  267, 1292,
      268, 1292,  268,  181,  182,  268,  269,  270, 1292,  269,
      270,  269,  270,  508,  269,  270,  180,  509,  267, 1292,
     1292,  267, 1292,  269,  269,  268,  507,  284,  268,  267,
     1292, 1292,  181,  182,  269,  270,  268,  269,  270, 1292,
      267, 1292, 1292,  267, 1292,  269,  270,  268,  510,  511,

      268,  607, 1292, 1292,  267, 1292,  269,  270,  512,  269,
      270,  268,  267, 1292, 1292, 1292,  267, 1292, 1292,  268,
      269,  270,  513,  268,  267,  515, 1292,  267,  269,  270,
      514,  268,  269,  270,  268,  267, 1292, 1292, 1292,  267,
      269,  270,  268,  269,  270,  520,  268, 1292, 1292,  521,
     1292,  269,  270,  516, 1292,  269,  270, 1292,  267,  517,
     1292,  522,  267, 1292,  519,  268, 1292,  518,  180,  268,
      267, 1292, 1292,  267,  269,  270,  267,  268,  269,  270,
      268,  267,  523,  268,  181,  182,  269,  270,  268,  269,
      270, 1292,  269,  270,  267,  524,  267,  269,  270, 1292,

      526,  268, 1292,  268, 1292,  266, 1292,  266,  525,  267,
      269,  270,  269,  270,  529,  266,  268,  528,  527, 1292,
      530,  531,  267, 1292,  267,  269,  270,  267, 1292,  268,
      534,  268, 1292,  532,  268,  267, 1292, 1292,  269,  270,
      269,  270,  268,  269,  270, 1292,  267, 1292,  267,  533,
     1292,  269,  270,  268, 1292,  268,  536,  537, 1292,  267,
      535,  267,  269,  270,  269,  270,  268,  538,  268, 1292,
      539, 1292,  267, 1292,  267,  269,  270,  269,  270,  268,
      267,  268,  180,  541, 1292,  267, 1292,  268,  269,  270,
      269,  270,  268,  543,  540, 1292,  269,  270,  181,  182,

     1292,  269,  270,  267, 1292,  267, 1292,  542,  608,  267,
      268,  321,  268, 1292, 1292,  544,  268,  321,  322,  269,
      270,  269,  270, 1292,  322,  269,  270,  323,  324,  545,
      321, 1292, 1292,  323,  324,  321, 1292,  322,  549,  266,
      546,  700,  322,  548,  323,  323,  323,  332,  323,  266,
     1292,  323,  324,  321,  701,  266,  323, 1292,  323,  550,
      322,  329,  330,  329,  329,  329,  329, 1292,  321,  323,
      324,  551, 1292, 1292,  552,  322,  331,  331,  323,  323,
     1292, 1292,  323, 1292,  323,  324,  321,  323,  323,  180,
      323, 1292,  323,  322,  334,  335,  336,  336,  334,  334,

     1292,  342,  323,  324,  337,  181,  182,  338,  343,  342,
      336,  335,  336,  336,  336,  336,  343,  344,  345, 1292,
      337,  323,  323,  338,  342,  344,  345, 1292, 1292, 1292,
     1292,  343,  558,  344,  344,  342, 1292,  344,  559,  342,
      344,  351,  343,  342, 1292,  344,  343,  344, 1292,  560,
      343,  344,  345,  344,  344,  344,  345,  344, 1292,  344,
      345, 1292,  342, 1292,  342,  344,  342,  344,  342,  343,
      180,  343, 1292,  343,  180,  343,  344,  344,  344,  345,
      344,  345,  344,  345,  344,  345,  181,  182,  609, 1292,
      181,  182,  342, 1292,  562,  563,  344,  344,  561,  343,

      564, 1292, 1292,  565,  342, 1292,  342, 1292,  344,  345,
     1292,  343, 1292,  343, 1292, 1292,  611, 1292,  342, 1292,
      344,  345,  344,  345, 1292,  343, 1292,  566,  569, 1292,
      342, 1292,  342, 1292,  344,  345,  567,  343, 1292,  343,
      570, 1292, 1292,  568,  342, 1292,  344,  345,  344,  345,
      342,  343,  342, 1292,  571,  342, 1292,  343,  342,  343,
      344,  345,  343, 1292, 1292,  343,  344,  345,  344,  345,
      342,  344,  345,  573,  344,  345,  342,  343,  180,  569,
     1292,  572,  574,  343,  342,  577,  344,  345,  575,  576,
      342,  343,  344,  345,  181,  182, 1292,  343,  579,  578,

      344,  345,  342, 1292,  342, 1292,  344,  345,  580,  343,
      374,  343,  581,  610, 1292,  374, 1292,  375,  344,  345,
      344,  345,  375,  374, 1292, 1292,  376,  377, 1292, 1292,
      375,  376,  377,  584,  376,  376, 1292,  582,  376,  376,
      382, 1292,  374, 1292,  374,  585,  376, 1292,  376,  375,
      586,  375,  376,  376, 1292,  374,  376, 1292,  376,  377,
      376,  377,  375,  374,  376, 1292,  376,  374, 1292,  374,
      375,  376,  377,  587,  375,  180,  375,  376,  376,  376,
      377, 1292,  386,  376,  377,  376,  377,  374, 1292, 1292,
      374,  181,  182,  374,  375,  376,  376,  375,  386, 1292,

      375, 1292, 1292,  376,  377,  374,  376,  377,  588,  376,
      377, 1292,  375,  590, 1292, 1292,  374, 1292,  374, 1292,
     1292,  376,  377,  375, 1292,  375, 1292,  589, 1292,  374,
     1292,  374,  376,  377,  376,  377,  375,  386,  375, 1292,
      591, 1292, 1292,  374, 1292,  376,  377,  376,  377, 1292,
      375,  374, 1292,  180,  386, 1292,  374, 1292,  375,  376,
      377,  592,  594,  375, 1292, 1292,  593,  376,  377,  181,
      182,  612,  376,  377, 1292, 1292, 1292,  595, 1292,  399,
      400,  401,  401,  399,  399,  180, 1292, 1292,  180,  402,
     1292,  596,  403,  401,  400,  401,  401,  401,  401, 1292,

     1292,  181,  182,  402,  181,  182,  403,  601,  614,  180,
      601, 1292, 1292, 1292,  613,  603,  601,  601,  180, 1292,
      601,  180, 1292,  180, 1292,  181,  182,  604,  601,  180,
      601,  605,  606, 1292,  181,  182,  615,  181,  182,  181,
      182,  616, 1292, 1292,  623,  181,  182, 1292, 1292,  619,
      620,  617, 1292, 1292,  618, 1292,  180, 1292, 1292,  601,
      601,  601,  180, 1292,  601, 1292,  621, 1292, 1292,  603,
      601,  601,  181,  182,  601,  180, 1292,  180,  181,  182,
     1292,  604,  601, 1292,  601,  605,  606,  622,  180, 1292,
      180,  181,  182,  181,  182,  180, 1292,  625, 1292,  180,

      624,  180, 1292, 1292,  181,  182,  181,  182, 1292,  180,
      626,  181,  182,  601,  601,  181,  182,  181,  182,  180,
     1292,  629, 1292, 1292,  628,  181,  182,  180, 1292,  180,
      627,  180, 1292,  180, 1292,  181,  182,  180,  630,  631,
      255,  180, 1292,  181,  182,  181,  182,  181,  182,  181,
      182, 1292,  180,  181,  182,  180, 1292,  181,  182,  635,
     1292,  180,  634,  637,  633,  180, 1292,  632,  181,  182,
      180,  181,  182,  636,  180, 1292,  638,  181,  182,  180,
     1292,  181,  182,  180, 1292,  640,  181,  182,  180, 1292,
      181,  182, 1292,  180,  639,  181,  182,  180, 1292,  181,

      182,  180,  642, 1292,  181,  182,  641, 1292,  180,  181,
      182, 1292,  180,  181,  182,  180, 1292,  181,  182,  180,
      647,  643,  645,  644,  181,  182,  180,  646,  181,  182,
      180,  181,  182,  648, 1292,  181,  182,  180, 1292, 1292,
      180,  649,  181,  182, 1292, 1292,  181,  182,  180, 1292,
      180,  651,  180,  181,  182,  650,  181,  182,  652,  180,
     1292,  653,  180,  654,  181,  182,  181,  182,  181,  182,
      180, 1292, 1292,  656,  180,  181,  182,  655,  181,  182,
     1292,  180, 1292, 1292, 1292,  658,  181,  182,  180,  657,
      181,  182, 1292,  180, 1292,  180,  661,  181,  182, 1292,

      659,  180, 1292,  180,  181,  182, 1292, 1292,  660,  181,
      182,  181,  182, 1292, 1292,  663,  662,  181,  182,  181,
      182,  180, 1292,  665,  180, 1292,  180, 1292, 1292, 1292,
      664,  180,  667,  180, 1292,  180, 1292,  181,  182,  180,
      181,  182,  181,  182, 1292,  255,  180,  181,  182,  181,
      182,  181,  182,  180,  669,  181,  182, 1292, 1292, 1292,
      180,  666,  181,  182,  180, 1292, 1292, 1292,  668,  181,
      182,  180,  671,  670, 1292,  673,  181,  182,  180,  672,
      181,  182,  180,  674, 1292, 1292,  676,  181,  182,  180,
      677,  678, 1292,  180,  181,  182, 1292,  675,  181,  182,

      180,  679, 1292,  180, 1292,  181,  182,  180,  680,  181,
      182,  180,  682, 1292,  180, 1292,  181,  182,  681,  181,
      182, 1292, 1292,  181,  182, 1292,  267,  181,  182,  683,
      181,  182,  685,  268, 1292,  684,  686,  267,  687, 1292,
      267, 1292,  269,  270,  268, 1292, 1292,  268, 1292, 1292,
     1292,  688,  601,  269,  270,  601,  269,  270, 1292, 1292,
      692,  601,  601,  267, 1292,  601,  180,  693,  180,  697,
      268,  267,  694,  601,  267,  601,  695,  696,  268,  269,
      270,  268,  181,  182,  181,  182,  267,  269,  270, 1292,
      269,  270,  813,  268,  180, 1292,  180, 1292, 1292,  698,

     1292,  699,  269,  270,  601,  601,  601, 1292, 1292,  601,
      181,  182,  181,  182,  692,  601,  601,  267,  822,  601,
     1292,  693,  814,  703,  268,  267,  694,  601, 1292,  601,
      695,  696,  268,  269,  270,  266, 1292,  704, 1292, 1292,
     1292,  269,  270, 1292,  525,  266,  705,  709,  267, 1292,
      706,  707,  702,  708,  267,  268,  267, 1292,  601,  601,
      267,  268, 1292,  268,  269,  270, 1292,  268, 1292, 1292,
      269,  270,  269,  270, 1292,  267,  269,  270,  710,  267,
     1292,  713,  268,  267,  711,  714,  268,  267, 1292, 1292,
      268,  269,  270, 1292,  268,  269,  270,  712,  267,  269,

      270,  267, 1292,  269,  270,  268, 1292, 1292,  268,  715,
      716, 1292,  717,  267,  269,  270, 1292,  269,  270, 1292,
      268,  267,  718,  719,  267, 1292,  267, 1292,  268,  269,
      270,  268,  267,  268, 1292,  720,  180,  269,  270,  268,
      269,  270,  269,  270,  267, 1292, 1292,  267,  269,  270,
      724,  268,  181,  182,  268, 1292,  722, 1292,  721,  267,
      269,  270,  723,  269,  270,  267,  268, 1292, 1292,  726,
      267, 1292,  268,  810, 1292,  269,  270,  268,  267, 1292,
      725,  269,  270,  267,  727,  268,  269,  270, 1292,  267,
      268, 1292, 1292, 1292,  269,  270,  268, 1292,  729,  269,

      270,  267, 1292, 1292, 1292,  269,  270, 1292,  268,  267,
     1292, 1292,  728, 1292,  731,  267,  268,  269,  270, 1292,
      730, 1292,  268,  267, 1292,  269,  270, 1292,  267,  733,
      268,  269,  270,  734,  267,  268, 1292, 1292,  732,  269,
      270,  268, 1292,  735,  269,  270,  267, 1292, 1292, 1292,
      269,  270, 1292,  268,  321, 1292, 1292,  342,  737,  736,
      342,  322,  269,  270,  343,  738, 1292,  343,  342, 1292,
      323,  324,  342,  344,  345,  343,  344,  345, 1292,  343,
     1292, 1292,  739,  601,  344,  345,  601, 1292,  344,  345,
      760,  743,  601,  601,  342, 1292,  601,  180,  744, 1292,

      759,  343,  764,  745,  601,  342,  601,  746,  747,  342,
      344,  345,  343,  181,  182, 1292,  343,  761, 1292, 1292,
     1292,  344,  345, 1292, 1292,  344,  345, 1292, 1292, 1292,
      762, 1292,  342,  811, 1292,  601,  601,  601,  180,  343,
      601, 1292,  763, 1292,  569,  743,  601,  601,  344,  345,
      601, 1292,  744,  180,  181,  182,  342,  745,  601, 1292,
      601,  746,  747,  343, 1292, 1292,  816,  342, 1292,  181,
      182,  342,  344,  345,  343,  765, 1292,  827,  343,  342,
     1292,  766, 1292,  344,  345, 1292,  343,  344,  345,  601,
      601,  601, 1292,  770,  601,  344,  345, 1292, 1292,  754,

      601,  601, 1292, 1292,  601, 1292,  755, 1292, 1292,  767,
      768,  756,  601,  342,  601,  757,  758,  342, 1292,  342,
      343,  342, 1292,  180,  343,  342,  343, 1292,  343,  344,
      345, 1292,  343,  344,  345,  344,  345,  344,  345,  181,
      182,  344,  345,  601,  601,  601, 1292,  773,  601, 1292,
      569,  569,  769,  754,  601,  601,  342,  771,  601,  812,
      755, 1292,  180,  343,  342,  756,  601, 1292,  601,  757,
      758,  343,  344,  345,  772,  342, 1292,  342,  181,  182,
      344,  345,  343,  342,  343, 1292, 1292, 1292,  823, 1292,
      343,  344,  345,  344,  345,  775,  180,  601,  601,  344,

      345,  342,  776,  777,  374, 1292,  774,  374,  343, 1292,
      180,  375,  181,  182,  375, 1292, 1292,  344,  345,  778,
      376,  377,  601,  376,  377,  601,  181,  182,  819,  793,
      782,  601,  601,  374,  826,  601,  180,  783, 1292, 1292,
      375,  374,  784,  601,  374,  601,  785,  786,  375,  376,
      377,  375,  181,  182, 1292,  374, 1292,  376,  377, 1292,
      376,  377,  375, 1292, 1292,  828,  374, 1292, 1292,  787,
      794,  376,  377,  375,  601,  601,  601,  180, 1292,  601,
      386, 1292,  376,  377,  782,  601,  601, 1292,  374,  601,
     1292,  783,  795,  181,  182,  375,  784,  601, 1292,  601,

      785,  786,  374,  796,  376,  377,  374, 1292,  797,  375,
      180, 1292, 1292,  375,  815,  180, 1292, 1292,  376,  377,
     1292, 1292,  376,  377,  798, 1292,  181,  182,  601,  601,
      374,  181,  182,  799, 1292,  601,  183,  375,  601,  180,
     1292,  183,  386,  602, 1292,  817,  376,  377, 1292, 1292,
      818, 1292, 1292,  788, 1292,  181,  182,  801,  180, 1292,
      789, 1292,  790, 1292, 1292,  820,  791,  792, 1292,  789,
      802,  821,  180,  802,  181,  182, 1292, 1292,  804,  802,
      802,  180, 1292,  802,  824,  180, 1292,  180,  181,  182,
      180,  802, 1292,  802,  805,  806,  180,  181,  182,  180,

     1292,  181,  182,  181,  182, 1292,  181,  182, 1292,  825,
     1292, 1292,  181,  182,  833,  181,  182, 1292, 1292, 1292,
      829,  831,  802,  802,  601,  830,  180,  601, 1292, 1292,
     1292, 1292,  809,  605,  605,  180,  832,  605,  180, 1292,
      180, 1292,  181,  182, 1292,  605,  180,  605,  601,  601,
      180,  181,  182,  180,  181,  182,  181,  182,  180,  837,
      835,  834,  181,  182,  180, 1292,  181,  182,  180,  181,
      182,  180, 1292, 1292,  181,  182,  605,  605,  836,  839,
      181,  182,  838,  180,  181,  182,  180,  181,  182,  840,
      180, 1292,  180, 1292, 1292, 1292, 1292,  841,  180,  181,

      182, 1292,  181,  182, 1292,  180,  181,  182,  181,  182,
      845,  180,  842,  180,  181,  182,  844,  180,  843, 1292,
      846,  181,  182,  180, 1292, 1292, 1292,  181,  182,  181,
      182,  180, 1292,  181,  182,  848,  180, 1292,  180,  181,
      182,  180,  847, 1292, 1292, 1292, 1292,  181,  182,  180,
     1292, 1292,  181,  182,  181,  182,  180,  181,  182,  180,
      851,  180,  850, 1292,  180,  181,  182,  180,  849,  180,
      852, 1292,  181,  182, 1292,  181,  182,  181,  182,  854,
      181,  182,  856,  181,  182,  181,  182,  180,  853, 1292,
     1292,  855,  180,  857,  180, 1292, 1292,  180, 1292,  180,

     1292,  180, 1292,  181,  182,  477,  180,  858,  181,  182,
      181,  182,  859,  181,  182,  181,  182,  181,  182, 1292,
      180, 1292,  181,  182, 1292, 1292,  180, 1292,  180, 1292,
      180, 1292, 1292,  860,  180,  861,  181,  182,  180,  862,
     1292,  863,  181,  182,  181,  182,  181,  182,  866, 1292,
      181,  182,  180, 1292,  181,  182,  864,  180, 1292,  180,
     1292,  180, 1292, 1292,  180,  865, 1292, 1292,  181,  182,
      180, 1292,  180,  181,  182,  181,  182,  181,  182,  868,
      181,  182,  870,  867, 1292, 1292,  181,  182,  181,  182,
      180, 1292, 1292,  180, 1292, 1292, 1292,  180, 1292, 1292,

      180,  869,  871,  180, 1292, 1292,  181,  182,  872,  181,
      182, 1292,  873,  181,  182,  874,  181,  182,  875,  181,
      182,  601,  271,  876,  601,  267, 1292,  271, 1292,  691,
     1292, 1292,  268,  267, 1292, 1292, 1292, 1292, 1292,  267,
      268,  269,  270,  878,  802,  887,  268,  802, 1292,  269,
      270, 1292,  880,  802,  802,  269,  270,  802, 1292,  881,
     1292, 1292, 1292,  267, 1292,  802,  267,  802,  882,  883,
      268,  889, 1292,  268,  267,  888, 1292,  267, 1292,  269,
      270,  268,  269,  270,  268, 1292, 1292, 1292,  267,  890,
      269,  270, 1292,  269,  270,  268,  802,  802,  601,  180,

     1292,  601, 1292,  891,  269,  270,  886,  695,  695,  892,
      267,  695, 1292,  267, 1292,  181,  182,  268,  525,  695,
      268,  695,  601,  601, 1292,  893,  269,  270,  267,  269,
      270,  267, 1292, 1292, 1292,  268, 1292, 1292,  268,  267,
      525, 1292,  267,  525,  269,  270,  268,  269,  270,  268,
      695,  695, 1292,  525, 1292,  269,  270,  267,  269,  270,
      895,  267, 1292,  180,  268,  267, 1292, 1292,  268,  267,
      894, 1292,  268,  269,  270, 1292,  268,  269,  270,  181,
      182,  269,  270,  896,  985,  269,  270,  897,  267, 1292,
      267, 1292,  267, 1292,  180,  268,  267,  268, 1292,  268,

     1292,  898, 1292,  268,  269,  270,  269,  270,  269,  270,
      181,  182,  269,  270,  902,  267,  983,  267, 1292,  267,
     1292,  899,  268, 1292,  268,  180,  268,  900, 1292, 1292,
      901,  269,  270,  269,  270,  269,  270, 1292,  267, 1292,
      267,  181,  182,  267,  903,  268,  267,  268, 1292, 1292,
      268,  986, 1292,  268,  269,  270,  269,  270,  904,  269,
      270,  905,  269,  270,  267, 1292,  267,  906, 1292,  267,
     1292,  268,  267,  268, 1292,  180,  268, 1292, 1292,  268,
      269,  270,  269,  270,  907,  269,  270, 1292,  269,  270,
      267,  181,  182,  267,  910, 1292, 1292,  268,  908,  909,

      268,  267, 1292, 1292,  267, 1292,  269,  270,  268,  269,
      270,  268,  911, 1292, 1292,  267, 1292,  269,  270,  267,
      269,  270,  268,  180, 1292, 1292,  268,  267, 1292, 1292,
      912,  269,  270,  916,  268,  269,  270,  913, 1292,  181,
      182,  914,  984,  269,  270,  267, 1292,  267, 1292, 1292,
      267,  918,  268, 1292,  268, 1292,  915,  268, 1292,  917,
     1292,  269,  270,  269,  270, 1292,  269,  270, 1292,  601,
      325,  919,  601, 1292, 1292,  325, 1292,  742, 1292, 1292,
      180,  601,  346, 1292,  601, 1292, 1292,  346, 1292,  753,
     1292,  921,  802,  180, 1292,  802,  181,  182, 1292, 1292,

      923,  802,  802,  931,  342,  802, 1292,  924, 1292,  181,
      182,  343,  342,  802, 1292,  802,  925,  926,  180,  343,
      344,  345, 1292,  342,  940,  342, 1292, 1292,  344,  345,
      343,  342,  343, 1292,  181,  182,  342, 1292,  343,  344,
      345,  344,  345,  343,  802,  802,  601,  344,  345,  601,
      941,  942,  344,  345,  929,  746,  746,  342,  945,  746,
      943,  342, 1292,  569,  343,  180, 1292,  746,  343,  746,
      601,  601,  342,  344,  345,  944, 1292,  344,  345,  343,
      342,  181,  182,  946, 1292,  342, 1292,  343,  344,  345,
      180, 1292,  343, 1292,  988, 1292,  344,  345,  746,  746,

      802,  344,  345,  802, 1292,  947,  181,  182,  933,  802,
      802,  342,  981,  802, 1292,  934,  180,  948,  343, 1292,
     1292,  802,  982,  802,  935,  936,  569,  344,  345,  949,
      342, 1292,  181,  182,  342, 1292,  993,  343, 1292, 1292,
     1292,  343, 1292,  180, 1292, 1292,  344,  345,  950,  342,
      344,  345,  802,  802,  601,  951,  343,  601, 1292,  181,
      182, 1292,  939,  757,  757,  344,  345,  757, 1292,  952,
      180, 1292, 1292,  342,  987,  757,  342,  757,  601,  601,
      343, 1292, 1292,  343,  342, 1292,  181,  182,  342,  344,
      345,  343,  344,  345, 1292,  343,  180, 1292,  954, 1292,

      344,  345,  342,  953,  344,  345,  757,  757, 1292,  343,
      374, 1292,  181,  182,  955, 1292,  180,  375,  344,  345,
      180,  569,  601,  378,  374,  601,  376,  377,  378, 1292,
      781,  375,  181,  182, 1292,  374,  181,  182,  990,  956,
      376,  377,  375, 1292,  958,  802,  967,  989,  802, 1292,
     1292,  376,  377,  960,  802,  802,  374, 1292,  802, 1292,
      961, 1292, 1292,  375,  374,  789,  802,  374,  802,  962,
      963,  375,  376,  377,  375,  374, 1292, 1292,  374, 1292,
      376,  377,  375,  376,  377,  375,  789,  180, 1292,  789,
     1292,  376,  377, 1292,  376,  377, 1292,  802,  802,  601,

      971, 1292,  601,  181,  182,  970,  969,  966,  785,  785,
      374, 1292,  785,  995,  374, 1292, 1292,  375,  374, 1292,
      785,  375,  785,  601,  601,  375,  376,  377,  180, 1292,
      376,  377,  374, 1292,  376,  377, 1292, 1292, 1292,  375,
     1292, 1292,  180,  972,  181,  182,  386,  180,  376,  377,
      973,  785,  785, 1292,  601,  183,  386,  601,  181,  182,
      183, 1292,  602,  181,  182,  991,  802,  183,  996,  802,
     1292, 1292,  183,  992,  803, 1292,  801,  802,  180, 1292,
      802, 1292, 1292, 1292, 1292,  804,  802,  802,  975, 1292,
      802,  180,  605,  605,  181,  182,  605, 1292,  802,  997,

      802,  805,  806,  180,  605,  180,  605,  181,  182, 1292,
      601,  599, 1292,  601, 1292, 1292,  599, 1292,  808,  181,
      182,  181,  182, 1292, 1292,  994,  180,  998,  999,  802,
      802,  802,  980,  180,  802,  605,  605, 1292, 1292,  978,
      805,  805,  181,  182,  805,  180, 1292, 1001,  180,  181,
      182,  180,  805,  180,  805,  802,  802,  180, 1292, 1000,
      180,  181,  182,  180,  181,  182, 1292,  181,  182,  181,
      182, 1292,  180,  181,  182,  180,  181,  182,  180,  181,
      182, 1292, 1005,  805,  805, 1292, 1002, 1003,  181,  182,
     1292,  181,  182,  180,  181,  182, 1292, 1292, 1004,  180,

     1292, 1008,  180, 1006,  180, 1292, 1007,  180, 1292,  181,
      182, 1292, 1292, 1009, 1292,  181,  182, 1292,  181,  182,
      181,  182,  180,  181,  182,  180, 1292, 1013,  180, 1010,
     1011,  180, 1292, 1012, 1292,  180, 1292, 1292,  181,  182,
     1292,  181,  182,  180,  181,  182,  180,  181,  182,  180,
     1015,  181,  182, 1016, 1292, 1292, 1014,  180, 1292,  181,
      182,  180,  181,  182, 1017,  181,  182,  180, 1292, 1292,
     1292, 1019,  180,  181,  182,  180, 1292,  181,  182, 1021,
     1018, 1292, 1292,  181,  182,  180, 1020, 1022,  181,  182,
      180,  181,  182,  180, 1292, 1292,  180, 1292, 1023,  180,

     1292,  181,  182,  180, 1292,  180,  181,  182, 1292,  181,
      182, 1024,  181,  182,  180,  181,  182, 1026, 1292,  181,
      182,  181,  182,  180, 1292, 1025,  180, 1292,  180, 1292,
      181,  182,  180, 1292, 1027, 1292, 1292, 1292,  180,  181,
      182, 1028,  181,  182,  181,  182, 1292, 1292,  181,  182,
      601,  271,  180,  601,  181,  182,  271, 1030,  691,  601,
     1292,  271,  601, 1029, 1292,  271,  695,  695,  181,  182,
      695, 1292,  878,  802, 1110, 1292,  802, 1292,  695, 1292,
      695,  880,  802,  802,  802,  271,  802,  802,  881, 1292,
      271, 1292,  879, 1292,  802, 1292,  802,  882,  883,  601,

      689,  267,  601, 1292, 1292,  689, 1032,  885,  268,  695,
      695, 1292,  267, 1292, 1292, 1292,  267,  269,  270,  268,
     1292, 1037, 1292,  268, 1292,  802,  802,  802,  269,  270,
      802, 1292,  269,  270, 1292, 1035,  882,  882, 1038,  267,
      882, 1292,  267, 1292, 1292, 1292,  268, 1292,  882,  268,
      882,  802,  802, 1039,  267,  269,  270,  267,  269,  270,
     1292,  268, 1292, 1040,  268, 1292,  601, 1292,  325,  601,
      269,  270,  325,  269,  270, 1292,  267, 1041, 1292,  882,
      882,  601,  525,  268,  601, 1292, 1292, 1292, 1292,  692,
      601,  601,  269,  270,  601, 1292,  693, 1042, 1292, 1292,

      267, 1292,  601,  267,  601,  695,  696,  268,  267, 1292,
      268,  267, 1292, 1292,  267,  268,  269,  270,  268,  269,
      270,  268, 1292, 1292,  269,  270, 1292,  269,  270, 1292,
      269,  270, 1292,  601,  601,  267, 1292, 1043, 1045, 1044,
     1292,  267,  268, 1046, 1292, 1292, 1047,  267,  268,  267,
     1292,  269,  270,  267,  268, 1292,  268,  269,  270, 1292,
      268, 1048, 1049,  269,  270,  269,  270, 1292, 1292,  269,
      270,  267, 1292,  267, 1292, 1292,  267, 1292,  268, 1292,
      268, 1292, 1292,  268, 1050, 1292, 1292,  269,  270,  269,
      270, 1052,  269,  270,  267, 1051, 1292, 1292,  267, 1292,

      267,  268,  267, 1292, 1292,  268, 1292,  268, 1292,  268,
      269,  270, 1292, 1053,  269,  270,  269,  270,  269,  270,
      267, 1056, 1057, 1292,  267, 1292, 1054,  268,  267, 1292,
     1055,  268,  267, 1292, 1292,  268,  269,  270, 1292,  268,
      269,  270, 1292,  267,  269,  270, 1058, 1292,  269,  270,
      268,  267, 1292,  180, 1059,  267, 1292,  267,  268,  269,
      270, 1060,  268, 1292,  268, 1292, 1292,  269,  270,  181,
      182,  269,  270,  269,  270,  601,  325, 1292,  601, 1292,
     1062,  325, 1292,  742, 1292, 1292, 1061,  802,  325, 1106,
      802, 1292, 1292,  325, 1292,  922, 1292,  921,  802, 1292,

      180,  802, 1292, 1292, 1292, 1292,  923,  802,  802, 1064,
     1292,  802, 1292,  924,  746,  746,  181,  182,  746,  802,
     1292,  802,  925,  926,  601,  740,  746,  601,  746, 1292,
      740, 1292,  928, 1292,  601,  346, 1292,  601, 1107, 1292,
      346, 1292,  753, 1292, 1292, 1292, 1069,  342, 1292, 1292,
      802,  802,  802, 1292,  343,  802,  931,  746,  746, 1292,
     1067,  925,  925,  344,  345,  925,  601, 1292,  346,  601,
     1292, 1079,  346,  925, 1292,  925,  802,  802,  802,  346,
     1292,  802, 1292, 1292,  346, 1292,  932, 1292, 1292,  757,
      757,  601,  751,  757,  601,  342, 1292,  751, 1292,  938,

     1071,  757,  343,  757,  925,  925,  601,  180, 1292,  601,
     1292,  344,  345, 1076,  743,  601,  601, 1292,  342,  601,
     1292,  744, 1292,  181,  182,  343,  569,  601, 1292,  601,
      746,  747,  757,  757,  344,  345,  342, 1292, 1292,  342,
     1292, 1292, 1105,  343, 1077,  180,  343, 1292,  180, 1292,
      342, 1292,  344,  345, 1292,  344,  345,  343,  601,  601,
      802,  181,  182,  802,  181,  182,  344,  345,  933,  802,
      802, 1080,  342,  802,  180,  934, 1078, 1108, 1292,  343,
      180,  802, 1292,  802,  935,  936,  342,  569,  344,  345,
      181,  182, 1292,  343,  342, 1292,  181,  182, 1292,  342,

     1292,  343,  344,  345, 1292, 1109,  343,  569, 1292, 1112,
      344,  345,  802,  802,  802,  344,  345,  802, 1081, 1292,
     1082, 1292,  933,  802,  802,  342, 1292,  802, 1292,  934,
     1292, 1292,  343, 1292, 1292,  802, 1083,  802,  935,  936,
      342,  344,  345,  342, 1292,  342, 1292,  343,  342, 1084,
      343, 1292,  343, 1292, 1292,  343,  344,  345, 1085,  344,
      345,  344,  345, 1088,  344,  345,  802,  802,  802, 1087,
     1292,  802, 1292, 1292, 1292, 1292, 1074,  935,  935,  342,
      569,  935, 1292,  342, 1292, 1292,  343, 1292, 1292,  935,
      343,  935,  802,  802, 1292,  344,  345, 1292, 1292,  344,

      345,  601,  378, 1292,  601, 1089, 1292,  378, 1292,  781,
      374, 1086,  601, 1292,  378,  601, 1292,  375,  378, 1292,
      935,  935,  601,  958, 1292,  601,  376,  377, 1101, 1292,
      754,  601,  601,  802,  378,  601,  802,  755, 1292,  378,
     1292,  959, 1292,  601, 1292,  601,  757,  758, 1292,  785,
      785,  601,  779,  785,  601, 1091, 1292,  779, 1292,  965,
     1292,  785, 1292,  785, 1292,  374, 1292, 1292, 1292, 1292,
     1292, 1292,  375, 1096,  601,  601,  802, 1292, 1292,  802,
     1292,  376,  377, 1292,  960,  802,  802, 1097,  374,  802,
      180,  961,  785,  785, 1292,  375, 1292,  802,  180,  802,

      962,  963,  374, 1292,  376,  377,  181,  182,  180,  375,
      374,  426, 1292,  789,  181,  182, 1292,  375,  376,  377,
     1111, 1292, 1292, 1098,  181,  182,  376,  377,  802,  802,
      802, 1099, 1292,  802, 1113, 1292, 1292, 1292,  960,  802,
      802,  374, 1292,  802, 1292,  961, 1292, 1292,  375, 1292,
     1292,  802, 1292,  802,  962,  963,  374,  376,  377,  802,
      183, 1100,  802,  375, 1292,  183, 1292,  803,  802, 1292,
      183,  802,  376,  377,  183, 1292,  805,  805, 1292, 1292,
      805,  975,  802,  802,  802, 1292, 1292,  802,  805, 1292,
      805, 1102, 1094,  962,  962,  802,  599,  962,  802, 1292,

     1292,  599, 1292,  977, 1292,  962, 1292,  962,  802,  802,
      601,  599,  180,  601,  180, 1292,  599, 1104,  808,  805,
      805,  601, 1292,  599,  601, 1292,  180,  599,  181,  182,
      181,  182,  980, 1292, 1116, 1292,  962,  962,  601,  180,
     1292,  601,  181,  182, 1292, 1292,  782,  601,  601,  180,
     1114,  601,  180,  783, 1292,  181,  182, 1119, 1292,  601,
     1292,  601,  785,  786,  180,  181,  182,  180,  181,  182,
      180, 1115,  180, 1292, 1118, 1292, 1117, 1292, 1292, 1292,
      181,  182,  180,  181,  182, 1292,  181,  182,  181,  182,
      601,  601,  802,  180, 1121,  802, 1292, 1292,  181,  182,

      804,  802,  802,  180, 1120,  802,  180, 1292, 1292,  181,
      182,  180, 1292,  802,  180,  802,  805,  806,  180,  181,
      182,  180,  181,  182, 1122,  180, 1292,  181,  182, 1292,
      181,  182,  180, 1124,  181,  182,  180,  181,  182, 1123,
     1125,  181,  182,  180,  802,  802,  180, 1292,  181,  182,
     1126,  180,  181,  182, 1127,  180, 1292, 1292,  180,  181,
      182, 1129,  181,  182, 1292,  180, 1292,  181,  182,  180,
     1292,  181,  182, 1128,  181,  182,  180, 1292, 1292,  180,
     1130,  181,  182,  180, 1292,  181,  182,  180, 1292,  180,
     1292,  180,  181,  182, 1131,  181,  182,  180, 1292,  181,

      182, 1132,  180,  181,  182,  181,  182,  181,  182, 1292,
      180, 1292,  180,  181,  182, 1292, 1292, 1292,  181,  182,
     1133, 1292, 1292,  267, 1134, 1292,  181,  182,  181,  182,
      268, 1135, 1137, 1292, 1136,  802,  271, 1138,  802,  269,
      270,  271, 1292,  879,  802, 1292,  271,  802,  882,  882,
      271,  267,  882,  802,  689, 1292,  802, 1032,  268,  689,
      882, 1034,  882,  601,  689, 1292,  601,  269,  270,  689,
     1292,  885, 1292, 1292, 1292, 1140,  601, 1292,  689,  601,
      267, 1292,  689,  267, 1292, 1037,  267,  268,  267, 1143,
      268,  882,  882,  268, 1292,  268,  269,  270, 1141,  269,

      270, 1142,  269,  270,  269,  270,  267, 1292, 1292,  267,
     1292,  267, 1292,  268, 1145, 1292,  268, 1292,  268, 1292,
     1292, 1292,  269,  270, 1144,  269,  270,  269,  270,  267,
     1292,  267, 1292,  267, 1292,  267,  268, 1292,  268, 1146,
      268, 1292,  268, 1292, 1292,  269,  270,  269,  270,  269,
      270,  269,  270,  267, 1292,  267, 1292, 1150, 1292, 1149,
      268, 1292,  268, 1292, 1292, 1292, 1147,  267, 1148,  269,
      270,  269,  270,  267,  268, 1151, 1292, 1292,  267, 1292,
      268,  267, 1292,  269,  270,  268, 1292, 1292,  268,  269,
      270, 1292, 1152,  267,  269,  270, 1292,  269,  270,  267,

      268, 1153, 1292, 1155, 1292,  267,  268,  267, 1292,  269,
      270, 1292,  268, 1154,  268,  269,  270, 1292,  267, 1292,
      267,  269,  270,  269,  270,  268, 1292,  268, 1157, 1158,
     1156, 1292, 1292, 1292,  269,  270,  269,  270,  802,  325,
     1292,  802, 1292, 1159,  325, 1292,  922,  802, 1292,  325,
      802, 1292, 1161,  325, 1292, 1160, 1292,  925,  925, 1292,
     1064,  925,  802,  740, 1292,  802,  180, 1292,  740,  925,
     1066,  925,  601,  740, 1292,  601, 1292, 1292,  740, 1292,
      928, 1292,  181,  182, 1163,  601, 1292,  740,  601,  802,
      346,  740,  802, 1292, 1069,  346, 1292,  932, 1292, 1292,

      925,  925,  802, 1292,  346,  802,  935,  935,  346, 1292,
      935, 1071, 1292,  802,  751, 1292,  802, 1292,  935,  751,
      935, 1073,  601,  751, 1292,  601,  180, 1292,  751,  342,
      938,  601, 1292,  751,  601, 1165,  343,  751, 1292, 1292,
     1292,  342,  181,  182, 1076,  344,  345, 1166,  343,  935,
      935, 1292, 1292,  342, 1292,  342, 1292,  344,  345, 1167,
      343,  342,  343, 1185,  180, 1292,  342, 1292,  343,  344,
      345,  344,  345,  343, 1292, 1292, 1292,  344,  345,  342,
      181,  182,  344,  345, 1292, 1292,  343, 1292, 1292, 1292,
      342, 1168,  342, 1169, 1292,  344,  345,  343, 1170,  343,

     1292, 1172, 1292, 1171,  342, 1292,  344,  345,  344,  345,
      342,  343,  569,  802, 1292,  378,  802,  343,  342,  378,
      344,  345, 1292, 1292,  342,  343,  344,  345, 1292, 1173,
     1292,  343, 1175, 1292,  344,  345, 1292, 1292, 1292, 1174,
      344,  345,  180,  802,  378, 1292,  802,  569, 1176,  378,
     1292,  959,  962,  962,  802,  779,  962,  802,  181,  182,
      779, 1292, 1093, 1292,  962, 1091,  962,  601,  779, 1292,
      601, 1292, 1292,  779,  374,  965, 1178,  601, 1292,  779,
      601,  375, 1186,  779, 1292,  374, 1292,  374, 1292, 1096,
      376,  377,  375, 1292,  375,  962,  962, 1292,  374, 1292,

      374,  376,  377,  376,  377,  375, 1292,  375, 1292, 1292,
      386, 1179,  374, 1180,  376,  377,  376,  377, 1292,  375,
      802, 1292,  599,  802,  802,  599,  599,  802,  376,  377,
      599,  180,  977, 1292,  180, 1181, 1182,  180, 1292,  180,
     1292, 1292,  180, 1292,  180, 1292, 1104,  181,  182, 1183,
      181,  182, 1292,  181,  182,  181,  182, 1184,  181,  182,
      181,  182,  180, 1292,  180, 1292, 1190,  180, 1188, 1187,
      180, 1292, 1292,  981, 1189,  180, 1292,  180,  181,  182,
      181,  182, 1292,  181,  182, 1292,  181,  182,  180, 1192,
      180,  181,  182,  181,  182, 1292,  180, 1193,  180, 1194,

      180, 1191,  180, 1292,  181,  182,  181,  182, 1292,  180,
     1292, 1195,  181,  182,  181,  182,  181,  182,  181,  182,
      180, 1292,  180, 1292, 1197,  181,  182, 1292,  180, 1292,
      180, 1292,  180, 1292, 1292, 1292,  181,  182,  181,  182,
      180, 1292,  180, 1196,  181,  182,  181,  182,  181,  182,
      180, 1198,  180, 1292,  180, 1292,  181,  182,  181,  182,
      180, 1292, 1200, 1292, 1292, 1199,  181,  182,  181,  182,
      181,  182, 1292, 1292, 1292, 1292,  181,  182,  802,  689,
     1201,  802, 1292, 1292,  689, 1292, 1034, 1292, 1202, 1292,
      267, 1292, 1203,  802, 1292,  689,  802,  268,  267,  689,

     1140,  267, 1292,  267, 1292,  268,  269,  270,  268,  267,
      268, 1292, 1292,  180,  269,  270,  268,  269,  270,  269,
      270,  267, 1292, 1207, 1292,  269,  270, 1204,  268,  181,
      182, 1292,  267, 1292,  267, 1205, 1206,  269,  270,  268,
     1208,  268, 1292, 1292,  180, 1292,  267, 1292,  269,  270,
      269,  270,  267,  268, 1209, 1292, 1292, 1292,  267,  268,
      181,  182,  269,  270,  267,  268, 1233, 1292,  269,  270,
     1292,  268,  267, 1212,  269,  270, 1210, 1211,  267,  268,
      269,  270, 1213,  267, 1292,  268,  267, 1292,  269,  270,
      268,  267, 1292,  268,  269,  270, 1292, 1292,  268,  269,

      270, 1292,  269,  270, 1292, 1292,  267,  269,  270,  267,
     1292, 1214, 1216,  268, 1215, 1292,  268,  267, 1292, 1292,
      267, 1292,  269,  270,  268,  269,  270,  268, 1292,  802,
     1292,  740,  802,  269,  270,  740,  269,  270,  802,  740,
     1292,  802, 1292, 1292,  740, 1218, 1066, 1292, 1217, 1292,
     1292, 1292, 1220, 1219, 1292,  802,  751, 1292,  802, 1292,
     1163,  751,  342, 1073,  802, 1292,  751,  802,  342,  343,
      751, 1292, 1292,  342, 1292,  343,  342, 1165,  344,  345,
      343,  342, 1292,  343,  344,  345, 1292, 1292,  343,  344,
      345, 1292,  344,  345,  342, 1292, 1224,  344,  345, 1221,

      342,  343,  342, 1225, 1292, 1222,  342,  343, 1223,  343,
      344,  345, 1292,  343, 1292, 1292,  344,  345,  344,  345,
      569,  569,  344,  345,  342, 1292,  342, 1292, 1292,  802,
      779,  343,  802,  343, 1292,  779, 1226, 1093, 1292, 1227,
      344,  345,  344,  345,  802, 1292,  779,  802, 1292,  374,
      779, 1178, 1292,  374, 1292, 1228,  375,  374, 1292, 1292,
      375, 1292, 1292, 1292,  375,  376,  377, 1292,  569,  376,
      377,  374, 1292,  376,  377,  374, 1292,  180,  375,  180,
     1229,  180,  375, 1231, 1230,  180, 1292,  376,  377,  180,
     1292,  376,  377,  181,  182,  181,  182,  181,  182, 1234,

     1292,  181,  182,  180, 1292,  181,  182, 1232,  180, 1292,
     1235,  386,  180, 1292,  180, 1292, 1237, 1292, 1236,  181,
      182,  180, 1292, 1292,  181,  182,  180, 1292,  181,  182,
      181,  182, 1292, 1238,  180, 1292,  180,  181,  182, 1239,
      180, 1292,  181,  182, 1292,  180, 1292,  180, 1240,  180,
      181,  182,  181,  182, 1292,  180,  181,  182, 1292, 1292,
     1242,  181,  182,  181,  182,  181,  182, 1292, 1292,  267,
     1241,  181,  182,  267, 1292,  267,  268, 1292, 1292, 1292,
      268,  267,  268, 1292, 1243,  269,  270, 1247,  268,  269,
      270,  269,  270,  267, 1292, 1244,  267,  269,  270, 1245,

      268, 1246, 1292,  268,  267, 1292, 1292, 1292,  267,  269,
      270,  268,  269,  270,  521,  268, 1292,  919, 1248,  267,
      269,  270,  267, 1292,  269,  270,  268, 1249, 1292,  268,
      267, 1292,  919,  267, 1292,  269,  270,  268,  269,  270,
      268,  267, 1292, 1292,  267, 1292,  269,  270,  268,  269,
      270,  268,  267, 1251, 1292, 1250, 1292,  269,  270,  268,
      269,  270, 1292,  267, 1292, 1292,  267, 1292,  269,  270,
      268,  342, 1252,  268, 1253, 1292, 1292, 1292,  343,  269,
      270, 1292,  269,  270,  342, 1292,  342,  344,  345,  342,
     1292,  343,  342,  343, 1254, 1292,  343, 1255, 1292,  343,

      344,  345,  344,  345, 1257,  344,  345, 1292,  344,  345,
     1256,  342, 1292,  342, 1292,  342, 1292,  374,  343, 1292,
      343,  569,  343, 1259,  375, 1292, 1258,  344,  345,  344,
      345,  344,  345,  376,  377, 1261,  374, 1292, 1260,  374,
     1292,  386,  374,  375, 1292,  180,  375, 1292, 1292,  375,
      180, 1292,  376,  377, 1292,  376,  377,  180,  376,  377,
      386,  181,  182,  180, 1263, 1292,  181,  182,  180, 1292,
     1262,  180, 1292,  181,  182,  180, 1292,  180, 1292,  181,
      182,  981, 1292, 1292,  181,  182,  180,  181,  182, 1292,
     1292,  181,  182,  181,  182,  180, 1292,  180, 1292,  838,

      180, 1292,  181,  182, 1292, 1292, 1264, 1292, 1265, 1292,
     1292,  181,  182,  181,  182,  267,  181,  182,  267, 1292,
     1266,  267,  268, 1267,  180,  268,  267, 1292,  268,  267,
     1292,  269,  270,  268,  269,  270,  268,  269,  270, 1292,
      181,  182,  269,  270, 1292,  269,  270, 1292,  267, 1292,
     1292,  180, 1292,  267, 1268,  268, 1292, 1269, 1270, 1292,
      268, 1271, 1292, 1272,  269,  270,  267,  181,  182,  269,
      270,  267, 1292,  268, 1273, 1274, 1292,  267,  268,  342,
     1292, 1292,  269,  270,  268,  342,  343,  269,  270, 1292,
      919, 1292,  343,  269,  270,  344,  345,  342, 1292,  342,

     1292,  344,  345,  342,  343, 1292,  343, 1275, 1292, 1292,
      343, 1292, 1292,  344,  345,  344,  345, 1292, 1276,  344,
      345,  342, 1292, 1292, 1277, 1292,  342, 1292,  343,  374,
     1292, 1279, 1292,  343, 1278, 1292,  375,  344,  345,  180,
      569,  180,  344,  345,  374,  376,  377, 1280,  569,  180,
     1292,  375,  267,  386, 1292,  181,  182,  181,  182,  268,
      376,  377, 1292, 1292, 1292,  181,  182, 1292,  269,  270,
     1292,  267, 1292, 1292, 1283,  267, 1281, 1010,  268,  267,
      386, 1282,  268,  267, 1292, 1292,  268,  269,  270,  180,
      268,  269,  270, 1284, 1292,  269,  270, 1292, 1292,  269,

      270, 1285,  267, 1292,  267,  181,  182, 1292,  267,  268,
      342,  268, 1292, 1292,  702,  268, 1292,  343,  269,  270,
      269,  270, 1286,  342,  269,  270,  344,  345, 1292, 1292,
      343,  342,  569, 1292,  342, 1292,  342, 1292,  343,  344,
      345,  343,  180,  343, 1292,  569, 1292,  344,  345, 1292,
      344,  345,  344,  345,  267, 1292,  569, 1287,  181,  182,
      267,  268, 1292, 1292, 1292,  267, 1292,  268,  267,  569,
      269,  270,  268, 1288, 1292,  268,  269,  270, 1292,  342,
     1292,  269,  270,  267,  269,  270,  343,  342, 1292, 1292,
      268,  267, 1292, 1292,  343,  344,  345, 1289,  268,  269,

      270, 1292, 1292,  344,  345, 1292, 1292,  269,  270, 1292,
     1292, 1290, 1292, 1292, 1291, 1292, 1292, 1292,  569,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  179,  179, 1292, 1292,  179,  179,
      179,  183, 1292,  183,  183,  183,  183,  183,  183,  183,
      183,  266,  266, 1292, 1292,  266,  266,  266,  271, 1292,

      271,  271,  271,  271,  271,  271,  271,  271,  320,  320,
     1292, 1292,  320,  320,  320,  325, 1292,  325,  325,  325,
      325,  325,  325,  325,  325,  341,  341, 1292, 1292,  341,
      341,  341,  346, 1292,  346,  346,  346,  346,  346,  346,
      346,  346,  373,  373, 1292, 1292,  373,  373,  373,  378,
     1292,  378,  378,  378,  378,  378,  378,  378,  378,  404,
     1292, 1292, 1292,  404, 1292,  404,  404, 1292,  404,  404,
      408, 1292, 1292,  408,  408, 1292,  408,  408,  408,  408,
      408,  409,  409, 1292,  409,  409,  409,  409,  409,  409,
      409,  409,  410, 1292,  410,  410, 1292, 1292,  410, 1292,

      410,  412,  412,  412,  412,  412, 1292,  412,  503,  503,
      503,  503,  503, 1292,  503,  547,  547,  547,  547,  547,
     1292,  547,  557,  557,  557,  557,  557, 1292,  557,  583,
      583,  583,  583,  583, 1292,  583,  599, 1292,  599,  599,
      599,  599,  599,  599,  599,  599,  602, 1292, 1292, 1292,
      602,  602,  602,  602,  602,  602,  602,  689, 1292,  689,
      689,  689,  689,  689,  689,  689,  689,  691, 1292, 1292,
     1292,  691,  691,  691,  691,  691,  691,  691,  740, 1292,
      740,  740,  740,  740,  740,  740,  740,  740,  742, 1292,
     1292, 1292,  742,  742,  742,  742,  742,  742,  742,  601,

     1292, 1292, 1292,  601,  601,  601,  601,  601,  601,  601,
      751, 1292,  751,  751,  751,  751,  751,  751,  751,  751,
      753, 1292, 1292, 1292,  753,  753,  753,  753,  753,  753,
      753,  779, 1292,  779,  779,  779,  779,  779,  779,  779,
      779,  781, 1292, 1292, 1292,  781,  781,  781,  781,  781,
      781,  781,  800,  800, 1292,  800,  800,  800,  800,  800,
      800,  800,  800,  803, 1292, 1292, 1292,  803,  803,  803,
      803,  803,  803,  803,  808, 1292, 1292, 1292,  808,  808,
      808,  808,  808,  808,  808,  877,  877, 1292,  877,  877,
      877,  877,  877,  877,  877,  877,  879, 1292, 1292, 1292,

      879,  879,  879,  879,  879,  879,  879,  885, 1292, 1292,
     1292,  885,  885,  885,  885,  885,  885,  885,  920,  920,
     1292,  920,  920,  920,  920,  920,  920,  920,  920,  922,
     1292, 1292, 1292,  922,  922,  922,  922,  922,  922,  922,
      928, 1292, 1292, 1292,  928,  928,  928,  928,  928,  928,
      928,  802, 1292, 1292, 1292,  802,  802,  802,  802,  802,
      802,  802,  930,  930, 1292,  930,  930,  930,  930,  930,
      930,  930,  930,  932, 1292, 1292, 1292,  932,  932,  932,
      932,  932,  932,  932,  938, 1292, 1292, 1292,  938,  938,
      938,  938,  938,  938,  938,  957,  957, 1292,  957,  957,

      957,  957,  957,  957,  957,  957,  959, 1292, 1292, 1292,
      959,  959,  959,  959,  959,  959,  959,  965, 1292, 1292,
     1292,  965,  965,  965,  965,  965,  965,  965,  974,  974,
     1292,  974,  974,  974,  974,  974,  974,  974,  974,  977,
     1292, 1292, 1292,  977,  977,  977,  977,  977,  977,  977,
      979,  979, 1292,  979,  979,  979,  979,  979,  979,  979,
      979, 1031, 1031, 1292, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1034, 1292, 1292, 1292, 1034, 1034, 1034, 1034,
     1034, 1034, 1034,  691, 1292, 1292, 1292,  691,  691,  691,
      691,  691,  691,  691, 1036, 1036, 1292, 1036, 1036, 1036,

     1036, 1036, 1036, 1036, 1036,  266,  266, 1292, 1292,  266,
      266,  266, 1063, 1063, 1292, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1066, 1292, 1292, 1292, 1066, 1066, 1066,
     1066, 1066, 1066, 1066,  742, 1292, 1292, 1292,  742,  742,
      742,  742,  742,  742,  742, 1068, 1068, 1292, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068,  930,  930, 1292,  930,
      930,  930,  930,  930,  930,  930,  930,  932, 1292, 1292,
     1292,  932,  932,  932,  932,  932,  932,  932, 1070, 1070,
     1292, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1073,
     1292, 1292, 1292, 1073, 1073, 1073, 1073, 1073, 1073, 1073,

      753, 1292, 1292, 1292,  753,  753,  753,  753,  753,  753,
      753, 1075, 1075, 1292, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075,  341,  341, 1292, 1292,  341,  341,  341,  957,
      957, 1292,  957,  957,  957,  957,  957,  957,  957,  957,
      959, 1292, 1292, 1292,  959,  959,  959,  959,  959,  959,
      959, 1090, 1090, 1292, 1090, 1090, 1090, 1090, 1090, 1090,
     1090, 1090, 1093, 1292, 1292, 1292, 1093, 1093, 1093, 1093,
     1093, 1093, 1093,  781, 1292, 1292, 1292,  781,  781,  781,
      781,  781,  781,  781, 1095, 1095, 1292, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095,  373,  373, 1292, 1292,  373,

      373,  373,  974,  974, 1292,  974,  974,  974,  974,  974,
      974,  974,  974,  802, 1292, 1292, 1292,  802,  802,  802,
      802,  802,  802,  802,  803, 1292, 1292, 1292,  803,  803,
      803,  803,  803,  803,  803, 1103, 1103, 1292, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1103,  979,  979, 1292,  979,
      979,  979,  979,  979,  979,  979,  979,  179,  179, 1292,
     1292,  179,  179,  179, 1139, 1139, 1292, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1162, 1162, 1292, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1164, 1164, 1292, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1177, 1177, 1292,

     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,   23, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292
    } ;

static yyconst flex_int16_t yy_chk[8666] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  962,   15,   15,   28,   15,   15,
       15,  935,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  925,   90,   28,   28,   13,   15,   13,  882,   29,
      808,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  805,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  783,   36,  605,   33,   33,   37,  109,  605,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  184,  184,  781,   39,
       39,  755,   39,   38,   39,   38,  272,  272,  753,   40,
       21,   21,   39,   21,   22,  179,   22,   22,   22,   22,
       39,   42,   22,   22,   22,   40,   40,  749,  180,   45,
      748,  179,  179,  744,   38,   38,   22,   42,   42,   43,
      183,   40,  180,   42,   40,   45,   45,   40,  267,   45,
      742,   45,  693,   42,  183,   43,   43,  326,  326,   42,
      695,  271,  267,  691,   45,  695,   22,   22,   44,   22,
       41,   43,   44,   43,   43,  271,   44,   44,  746,   44,
       43,   46,   44,  746,   44,  602,   41,   41,  163,  598,

      163,   41,   47,  321,   61,   41,  597,   46,   46,   41,
       41,   61,   41,   48,  163,   41,   49,  321,   47,   47,
       61,   61,   46,  325,  556,  342,   46,  346,   47,   48,
       48,   48,   49,   49,   49,   49,   50,  325,   49,  342,
       51,  346,   49,  555,   52,   48,  347,  347,   49,   48,
       53,  374,   50,   50,   50,  554,   51,   51,   50,   51,
       52,   52,   52,   51,  553,  374,   53,   53,   50,   54,
       51,   51,  757,   51,   50,  552,   52,  757,   56,   52,
       57,  551,   52,  403,   52,   54,   54,   54,   53,   59,
      402,   54,  379,  379,   56,   56,   57,   57,   54,  340,

       56,  600,  600,   56,   56,   59,   59,   54,   55,   55,
       58,   57,   55,   56,   59,   59,   55,   55,   60,   55,
      690,  690,   55,  181,   55,   55,   58,   58,   58,  378,
       64,  339,   58,   64,   60,   60,   58,   64,   65,  181,
      181,  338,   60,  378,   66,   65,   64,   64,   60,  413,
       66,   66,   67,  504,   65,   65,   66,  337,   68,   67,
       66,   66,   67,  413,   69,   68,  107,  504,   67,   67,
       68,   69,   70,   70,   68,   68,   70,  106,   71,   23,
       69,   69,   73,    0,   70,   71,   70,  785,  185,   73,
       75,  185,  785,   76,   71,   71,   74,   75,   73,   73,

       76,  175,  175,   74,  185,  185,   75,   75,   73,   76,
       76,   76,   74,   74,   71,   70,   70,   72,  548,   78,
      741,  741,   75,    0,   72,   75,   78,   74,  558,  584,
       74,    0,  548,   72,   72,   78,   78,   74,   78,   72,
        0,   79,  558,  584,  175,  175,   72,   72,   79,   72,
        0,   72,   72,   86,   72,   77,    0,   79,   79,   79,
       86,  599,   77,   79,  190,  689,   80,  752,  752,   86,
       86,   77,   77,   80,    0,  599,   77,   81,   77,  689,
      190,  190,   80,   80,   81,   80,   77,    0,   80,   86,
       82,   77,   77,   81,   81,  740,   81,   82,   83,  751,

        0,   84,   80,  190,   85,   83,   82,   82,   84,  740,
       81,   85,   87,  751,   83,   83,    0,   84,   84,   87,
       85,   85,   82,    0,   83,   82,   85,   83,   87,   87,
       87,  780,  780,   84,   84,   88,   85,   89,   84,   84,
        0,   96,   88,   92,   89,  189,   92,   88,   96,   93,
       92,   88,   88,   89,   89,   93,   93,   96,   96,   92,
       92,  189,  189,    0,  779,   93,   93,   94,   94,   94,
       94,   94,   94,    0,   94,    0,   95,  189,  779,   97,
        0,   94,    0,   95,   95,   95,   97,   99,    0,  193,
       94,   94,   95,   95,   99,   97,   97,   98,   98,    0,

        0,   98,    0,   99,   99,  193,  193,  195,    0,   98,
      193,   98,  102,  102,  102,  102,  102,  102,   99,    0,
        0,  196,  102,  195,  195,  102,  104,  104,  104,  104,
      104,  104,    0,  195,    0,    0,  104,  196,  196,  104,
       98,   98,  105,  105,  105,  105,  105,  105,    0,  108,
        0,  112,  105,  114,  112,  105,  108,  115,  112,  114,
      114,    0,    0,  192,  115,  108,  108,  112,  112,  114,
      114,  116,    0,  115,  115,  120,    0,  117,  116,  192,
      192,    0,  120,    0,  117,    0,    0,  116,  116,  117,
        0,  120,  120,  117,  117,  121,  121,  122,  383,  121,

      192,  124,    0,  123,  122,  383,  383,  121,  124,  121,
      123,  383,  194,  122,  122,  125,    0,  124,  124,  123,
      123,    0,  125,    0,    0,    0,    0,  124,  194,  194,
        0,  125,  125,  122,  194,  123,  126,    0,  121,  121,
      123,  127,    0,  126,  134,    0,    0,  125,  127,  128,
      125,  134,  126,  126,  126,    0,  128,  127,  127,  788,
      134,  134,  127,  129,  127,  128,  128,  128,  788,    0,
      129,  128,  788,  788,  130,  788,  134,    0,  127,  129,
      129,  130,    0,    0,    0,  129,    0,  131,    0,  132,
      130,  130,  186,  130,  131,  133,  132,  203,  186,  129,

      137,    0,  133,  131,  131,  132,  132,  137,  186,  186,
        0,  133,  133,  203,  203,  132,  137,  137,  139,  131,
      140,  139,  131,  141,    0,  139,  140,  140,  133,    0,
      141,  142,  133,    0,  139,  139,  140,  140,  142,  141,
      141,  143,  143,  145,  199,  143,    0,  142,  142,    0,
      145,  145,  145,  143,    0,  143,  145,  146,    0,  147,
      199,  199,  145,  148,  146,  199,  147,    0,    0,    0,
      148,    0,    0,  146,  146,  147,  147,    0,  147,  148,
      148,    0,  148,    0,  143,  143,  144,    0,  146,  149,
        0,    0,    0,  144,  150,    0,  149,  151,    0,  148,

        0,  150,  144,  144,  151,  149,  149,    0,  144,    0,
      150,  150,    0,  151,  151,  144,  144,  152,    0,  187,
      144,  144,  149,  153,  152,  154,  151,  187,  187,  150,
      153,  197,  154,  152,  152,  187,  187,    0,    0,  153,
      153,  154,  154,  154,    0,    0,    0,  197,  197,  152,
        0,    0,    0,  197,    0,  152,    0,    0,    0,  153,
      155,  155,  155,  155,  155,  155,    0,  182,  182,  182,
      155,    0,  182,  155,  157,  157,  157,  157,  157,  157,
      182,    0,  182,    0,  157,    0,  198,  157,  158,  158,
      158,  158,  158,  158,    0,  188,  188,  191,  158,  188,

      201,  158,  198,  198,  200,    0,    0,  188,  198,  188,
        0,  182,  182,  191,  191,  204,  201,  201,    0,    0,
      200,  200,  201,  191,  202,    0,  191,    0,    0,    0,
      205,  204,  204,  200,  200,  200,    0,    0,  188,  188,
      202,  202,  200,  202,    0,  204,  205,  205,  206,    0,
      207,    0,  211,  205,  208,  801,  801,  801,  801,  209,
      202,  801,  210,    0,  206,  206,  207,  207,  211,  211,
      208,  208,  207,  212,  208,  209,  209,  209,  210,  210,
      213,    0,  214,    0,  206,  215,    0,  211,    0,  212,
      212,  208,  216,    0,  210,  212,  213,  213,  214,  214,

      217,  215,  215,    0,    0,  213,    0,  218,  216,  216,
      216,    0,  219,    0,  220,    0,  217,  217,  221,    0,
      217,  222,  215,  218,  218,    0,    0,    0,  219,  219,
      220,  220,  223,  220,  221,  221,  221,  222,  222,  224,
        0,  225,  218,  219,  226,    0,  227,    0,  223,  223,
      221,    0,    0,    0,    0,  224,  224,  225,  225,    0,
      226,  226,  227,  227,  228,    0,  229,  227,    0,  223,
      230,  225,  231,    0,  232,  224,    0,  233,    0,  234,
      228,  228,  229,  229,    0,  226,  230,  230,  231,  231,
      232,  232,  235,  233,  233,  234,  234,  236,    0,  228,

      233,  232,  231,  237,    0,  230,  229,  243,  235,  235,
      238,  234,  240,  236,  236,  239,    0,    0,  241,  237,
      237,    0,    0,  243,  243,    0,  238,  238,  240,  240,
        0,  239,  239,  236,  241,  241,  242,    0,  237,  241,
      237,  239,  244,  238,  243,    0,    0,  239,  240,  245,
        0,  246,  242,  242,  247,    0,    0,  248,  244,  244,
      249,    0,  242,  244,    0,  245,  245,  246,  246,    0,
      247,  247,  247,  248,  248,    0,  249,  249,  244,  250,
      246,  244,  244,  247,  251,  245,  252,    0,    0,  248,
        0,  247,  249,  253,    0,  250,  250,  249,    0,  254,

      251,  251,  252,  252,  252,  255,  251,    0,  252,  253,
      253,  256,  253,  257,  250,  254,  254,  258,    0,    0,
      259,  255,  255,  253,    0,    0,    0,  256,  256,  257,
      257,  257,  260,  258,  258,  254,  259,  259,    0,    0,
      261,  256,  262,  258,  263,    0,    0,    0,  260,  260,
        0,    0,    0,    0,  265,  259,  261,  261,  262,  262,
      263,  263,  261,  264,  262,    0,  266,  260,  268,  264,
      265,  265,  265,  266,  262,  268,    0,    0,    0,  264,
      264,  263,  266,  266,  268,  268,  269,    0,    0,    0,
        0,    0,    0,  269,  270,  270,  270,  273,    0,  270,

      273,  275,  269,  269,  273,  274,    0,  270,  275,  270,
        0,  274,  274,  273,  273,    0,  276,  275,  275,  277,
        0,  274,  274,  276,    0,    0,  277,    0,    0,    0,
      278,  278,  276,  276,  278,  277,  277,  412,  270,  270,
      279,    0,  278,  280,  278,  281,    0,  279,  282,    0,
      280,    0,  281,  412,  412,  282,  279,  279,    0,  280,
      280,  281,  281,  281,  282,  282,  416,  282,  283,    0,
        0,  284,    0,  278,  278,  283,  279,  280,  284,  285,
        0,    0,  416,  416,  283,  283,  285,  284,  284,    0,
      286,    0,    0,  287,    0,  285,  285,  286,  283,  283,

      287,  416,    0,    0,  288,    0,  286,  286,  285,  287,
      287,  288,  289,    0,    0,    0,  290,    0,    0,  289,
      288,  288,  286,  290,  291,  288,    0,  293,  289,  289,
      287,  291,  290,  290,  293,  292,    0,    0,    0,  294,
      291,  291,  292,  293,  293,  294,  294,    0,    0,  294,
        0,  292,  292,  290,    0,  294,  294,    0,  295,  291,
        0,  294,  296,    0,  293,  295,    0,  292,  419,  296,
      297,    0,    0,  298,  295,  295,  299,  297,  296,  296,
      298,  300,  296,  299,  419,  419,  297,  297,  300,  298,
      298,    0,  299,  299,  301,  298,  302,  300,  300,    0,

      300,  301,    0,  302,    0,  303,    0,  303,  299,  304,
      301,  301,  302,  302,  303,  303,  304,  301,  300,    0,
      303,  303,  305,    0,  306,  304,  304,  307,    0,  305,
      306,  306,    0,  304,  307,  308,    0,    0,  305,  305,
      306,  306,  308,  307,  307,    0,  309,    0,  310,  305,
        0,  308,  308,  309,    0,  310,  307,  308,    0,  311,
      306,  312,  309,  309,  310,  310,  311,  308,  312,    0,
      309,    0,  313,    0,  314,  311,  311,  312,  312,  313,
      315,  314,  417,  312,    0,  316,    0,  315,  313,  313,
      314,  314,  316,  314,  311,    0,  315,  315,  417,  417,

        0,  316,  316,  317,    0,  318,    0,  313,  417,  319,
      317,  320,  318,    0,    0,  315,  319,  322,  320,  317,
      317,  318,  318,    0,  322,  319,  319,  320,  320,  317,
      323,    0,    0,  322,  322,  327,    0,  323,  327,  511,
      318,  511,  327,  324,  324,  324,  323,  323,  324,  511,
        0,  327,  327,  328,  511,  511,  324,    0,  324,  328,
      328,  329,  329,  329,  329,  329,  329,    0,  331,  328,
      328,  329,    0,    0,  329,  331,  331,  331,  332,  332,
        0,    0,  332,    0,  331,  331,  333,  324,  324,  426,
      332,    0,  332,  333,  334,  334,  334,  334,  334,  334,

        0,  341,  333,  333,  334,  426,  426,  334,  341,  343,
      336,  336,  336,  336,  336,  336,  343,  341,  341,    0,
      336,  332,  332,  336,  344,  343,  343,    0,    0,    0,
        0,  344,  345,  345,  345,  348,    0,  345,  348,  350,
      344,  344,  348,  349,    0,  345,  350,  345,    0,  349,
      349,  348,  348,  351,  351,  350,  350,  351,    0,  349,
      349,    0,  352,    0,  353,  351,  355,  351,  354,  352,
      418,  353,    0,  355,  421,  354,  345,  345,  352,  352,
      353,  353,  355,  355,  354,  354,  418,  418,  418,    0,
      421,  421,  356,    0,  353,  353,  351,  351,  352,  356,

      354,    0,    0,  355,  357,    0,  358,    0,  356,  356,
        0,  357,    0,  358,    0,    0,  421,    0,  359,    0,
      357,  357,  358,  358,    0,  359,    0,  356,  359,    0,
      360,    0,  361,    0,  359,  359,  357,  360,    0,  361,
      359,    0,    0,  358,  362,    0,  360,  360,  361,  361,
      363,  362,  364,    0,  361,  365,    0,  363,  366,  364,
      362,  362,  365,    0,    0,  366,  363,  363,  364,  364,
      367,  365,  365,  363,  366,  366,  368,  367,  420,  365,
        0,  362,  364,  368,  369,  366,  367,  367,  364,  364,
      370,  369,  368,  368,  420,  420,    0,  370,  368,  367,

      369,  369,  371,    0,  372,    0,  370,  370,  369,  371,
      373,  372,  370,  420,    0,  375,    0,  373,  371,  371,
      372,  372,  375,  376,    0,    0,  373,  373,    0,    0,
      376,  375,  375,  377,  377,  377,    0,  371,  377,  376,
      376,    0,  380,    0,  381,  380,  377,    0,  377,  380,
      381,  381,  382,  382,    0,  384,  382,    0,  380,  380,
      381,  381,  384,  385,  382,    0,  382,  386,    0,  387,
      385,  384,  384,  384,  386,  435,  387,  377,  377,  385,
      385,    0,  385,  386,  386,  387,  387,  388,    0,    0,
      389,  435,  435,  390,  388,  382,  382,  389,  387,    0,

      390,    0,    0,  388,  388,  391,  389,  389,  388,  390,
      390,    0,  391,  390,    0,    0,  392,    0,  393,    0,
        0,  391,  391,  392,    0,  393,    0,  389,    0,  394,
        0,  395,  392,  392,  393,  393,  394,  391,  395,    0,
      392,    0,    0,  396,    0,  394,  394,  395,  395,    0,
      396,  397,    0,  422,  393,    0,  398,    0,  397,  396,
      396,  394,  396,  398,    0,    0,  395,  397,  397,  422,
      422,  422,  398,  398,    0,    0,    0,  397,    0,  399,
      399,  399,  399,  399,  399,  423,    0,    0,  424,  399,
        0,  398,  399,  401,  401,  401,  401,  401,  401,    0,

        0,  423,  423,  401,  424,  424,  401,  414,  424,  427,
      414,    0,    0,    0,  423,  414,  414,  414,  425,    0,
      414,  428,    0,  431,    0,  427,  427,  414,  414,  429,
      414,  414,  414,    0,  425,  425,  425,  428,  428,  431,
      431,  427,    0,    0,  431,  429,  429,    0,    0,  429,
      429,  428,    0,    0,  428,    0,  430,    0,    0,  414,
      414,  415,  432,    0,  415,    0,  429,    0,    0,  415,
      415,  415,  430,  430,  415,  433,    0,  434,  432,  432,
        0,  415,  415,    0,  415,  415,  415,  430,  436,    0,
      437,  433,  433,  434,  434,  438,    0,  433,    0,  439,

      432,  440,    0,    0,  436,  436,  437,  437,    0,  442,
      434,  438,  438,  415,  415,  439,  439,  440,  440,  441,
        0,  439,    0,    0,  438,  442,  442,  443,    0,  444,
      437,  445,    0,  446,    0,  441,  441,  447,  440,  442,
      441,  449,    0,  443,  443,  444,  444,  445,  445,  446,
      446,    0,  448,  447,  447,  450,    0,  449,  449,  447,
        0,  451,  446,  449,  445,  452,    0,  443,  448,  448,
      453,  450,  450,  448,  454,    0,  450,  451,  451,  455,
        0,  452,  452,  456,    0,  452,  453,  453,  457,    0,
      454,  454,    0,  458,  451,  455,  455,  459,    0,  456,

      456,  460,  455,    0,  457,  457,  454,    0,  461,  458,
      458,    0,  462,  459,  459,  463,    0,  460,  460,  464,
      460,  456,  458,  457,  461,  461,  465,  459,  462,  462,
      467,  463,  463,  462,    0,  464,  464,  466,    0,    0,
      468,  464,  465,  465,    0,    0,  467,  467,  469,    0,
      470,  465,  471,  466,  466,  464,  468,  468,  466,  472,
        0,  467,  473,  468,  469,  469,  470,  470,  471,  471,
      474,    0,    0,  469,  475,  472,  472,  468,  473,  473,
        0,  476,    0,    0,    0,  472,  474,  474,  477,  471,
      475,  475,    0,  478,    0,  479,  475,  476,  476,    0,

      473,  480,    0,  481,  477,  477,    0,    0,  474,  478,
      478,  479,  479,    0,    0,  478,  476,  480,  480,  481,
      481,  482,    0,  480,  483,    0,  484,    0,    0,    0,
      479,  485,  484,  486,    0,  487,    0,  482,  482,  489,
      483,  483,  484,  484,    0,  483,  488,  485,  485,  486,
      486,  487,  487,  490,  486,  489,  489,    0,    0,    0,
      491,  482,  488,  488,  492,    0,    0,    0,  485,  490,
      490,  493,  487,  486,    0,  489,  491,  491,  494,  488,
      492,  492,  495,  490,    0,    0,  492,  493,  493,  497,
      492,  493,    0,  496,  494,  494,    0,  491,  495,  495,

      498,  494,    0,  499,    0,  497,  497,  501,  495,  496,
      496,  500,  496,    0,  502,    0,  498,  498,  495,  499,
      499,    0,    0,  501,  501,    0,  503,  500,  500,  497,
      502,  502,  499,  503,    0,  498,  500,  507,  501,    0,
      509,    0,  503,  503,  507,    0,    0,  509,    0,    0,
        0,  502,  505,  507,  507,  505,  509,  509,    0,    0,
      505,  505,  505,  508,    0,  505,  610,  505,  611,  507,
      508,  510,  505,  505,  512,  505,  505,  505,  510,  508,
      508,  512,  610,  610,  611,  611,  514,  510,  510,    0,
      512,  512,  610,  514,  612,    0,  619,    0,    0,  508,

        0,  510,  514,  514,  505,  505,  506,    0,    0,  506,
      612,  612,  619,  619,  506,  506,  506,  513,  619,  506,
        0,  506,  612,  514,  513,  516,  506,  506,    0,  506,
      506,  506,  516,  513,  513,  515,    0,  515,    0,    0,
        0,  516,  516,    0,  515,  515,  515,  516,  517,    0,
      515,  515,  513,  515,  518,  517,  519,    0,  506,  506,
      520,  518,    0,  519,  517,  517,    0,  520,    0,    0,
      518,  518,  519,  519,    0,  521,  520,  520,  517,  522,
        0,  519,  521,  523,  518,  520,  522,  524,    0,    0,
      523,  521,  521,    0,  524,  522,  522,  518,  525,  523,

      523,  526,    0,  524,  524,  525,    0,    0,  526,  522,
      522,    0,  523,  527,  525,  525,    0,  526,  526,    0,
      527,  528,  524,  526,  529,    0,  530,    0,  528,  527,
      527,  529,  531,  530,    0,  527,  607,  528,  528,  531,
      529,  529,  530,  530,  532,    0,    0,  533,  531,  531,
      531,  532,  607,  607,  533,    0,  529,    0,  528,  534,
      532,  532,  530,  533,  533,  535,  534,    0,    0,  533,
      536,    0,  535,  607,    0,  534,  534,  536,  537,    0,
      532,  535,  535,  538,  534,  537,  536,  536,    0,  539,
      538,    0,    0,    0,  537,  537,  539,    0,  537,  538,

      538,  540,    0,    0,    0,  539,  539,    0,  540,  541,
        0,    0,  536,    0,  539,  542,  541,  540,  540,    0,
      538,    0,  542,  543,    0,  541,  541,    0,  544,  541,
      543,  542,  542,  542,  545,  544,    0,    0,  540,  543,
      543,  545,    0,  543,  544,  544,  546,    0,    0,    0,
      545,  545,    0,  546,  547,    0,    0,  557,  544,  543,
      562,  547,  546,  546,  557,  545,    0,  562,  561,    0,
      547,  547,  566,  557,  557,  561,  562,  562,    0,  566,
        0,    0,  546,  549,  561,  561,  549,    0,  566,  566,
      562,  549,  549,  549,  563,    0,  549,  608,  549,    0,

      561,  563,  566,  549,  549,  565,  549,  549,  549,  564,
      563,  563,  565,  608,  608,    0,  564,  563,    0,    0,
        0,  565,  565,    0,    0,  564,  564,    0,    0,    0,
      563,    0,  567,  608,    0,  549,  549,  550,  614,  567,
      550,    0,  565,    0,  564,  550,  550,  550,  567,  567,
      550,    0,  550,  624,  614,  614,  568,  550,  550,    0,
      550,  550,  550,  568,    0,    0,  614,  569,    0,  624,
      624,  572,  568,  568,  569,  567,    0,  624,  572,  570,
        0,  568,    0,  569,  569,    0,  570,  572,  572,  550,
      550,  559,    0,  572,  559,  570,  570,    0,    0,  559,

      559,  559,    0,    0,  559,    0,  559,    0,    0,  570,
      570,  559,  559,  573,  559,  559,  559,  571,    0,  574,
      573,  575,    0,  609,  571,  577,  574,    0,  575,  573,
      573,    0,  577,  571,  571,  574,  574,  575,  575,  609,
      609,  577,  577,  559,  559,  560,    0,  577,  560,    0,
      573,  574,  571,  560,  560,  560,  576,  575,  560,  609,
      560,    0,  620,  576,  578,  560,  560,    0,  560,  560,
      560,  578,  576,  576,  576,  579,    0,  580,  620,  620,
      578,  578,  579,  581,  580,    0,    0,    0,  620,    0,
      581,  579,  579,  580,  580,  579,  623,  560,  560,  581,

      581,  582,  580,  581,  583,    0,  578,  589,  582,    0,
      617,  583,  623,  623,  589,    0,    0,  582,  582,  582,
      583,  583,  585,  589,  589,  585,  617,  617,  617,  589,
      585,  585,  585,  587,  623,  585,  625,  585,    0,    0,
      587,  590,  585,  585,  591,  585,  585,  585,  590,  587,
      587,  591,  625,  625,    0,  592,    0,  590,  590,    0,
      591,  591,  592,    0,    0,  625,  593,    0,    0,  587,
      590,  592,  592,  593,  585,  585,  586,  613,    0,  586,
      591,    0,  593,  593,  586,  586,  586,    0,  594,  586,
        0,  586,  592,  613,  613,  594,  586,  586,    0,  586,

      586,  586,  595,  593,  594,  594,  596,    0,  594,  595,
      615,    0,    0,  596,  613,  616,    0,    0,  595,  595,
        0,    0,  596,  596,  594,    0,  615,  615,  586,  586,
      588,  616,  616,  595,    0,  603,  603,  588,  603,  618,
        0,  603,  596,  603,    0,  615,  588,  588,    0,    0,
      616,    0,    0,  588,    0,  618,  618,  603,  621,    0,
      588,    0,  588,    0,    0,  618,  588,  588,    0,  588,
      604,  618,  622,  604,  621,  621,    0,    0,  604,  604,
      604,  626,    0,  604,  621,  627,    0,  628,  622,  622,
      629,  604,    0,  604,  604,  604,  631,  626,  626,  630,

        0,  627,  627,  628,  628,    0,  629,  629,    0,  622,
        0,    0,  631,  631,  631,  630,  630,    0,    0,    0,
      627,  629,  604,  604,  606,  628,  632,  606,    0,    0,
        0,    0,  606,  606,  606,  633,  630,  606,  635,    0,
      634,    0,  632,  632,    0,  606,  636,  606,  606,  606,
      637,  633,  633,  638,  635,  635,  634,  634,  639,  635,
      633,  632,  636,  636,  640,    0,  637,  637,  641,  638,
      638,  642,    0,    0,  639,  639,  606,  606,  634,  637,
      640,  640,  636,  643,  641,  641,  644,  642,  642,  640,
      645,    0,  646,    0,    0,    0,    0,  642,  647,  643,

      643,    0,  644,  644,    0,  648,  645,  645,  646,  646,
      646,  649,  643,  650,  647,  647,  645,  651,  644,    0,
      647,  648,  648,  652,    0,    0,    0,  649,  649,  650,
      650,  653,    0,  651,  651,  650,  654,    0,  655,  652,
      652,  657,  649,    0,    0,    0,    0,  653,  653,  656,
        0,    0,  654,  654,  655,  655,  658,  657,  657,  659,
      655,  660,  654,    0,  661,  656,  656,  662,  653,  663,
      656,    0,  658,  658,    0,  659,  659,  660,  660,  659,
      661,  661,  661,  662,  662,  663,  663,  664,  658,    0,
        0,  660,  665,  662,  666,    0,    0,  667,    0,  668,

        0,  669,    0,  664,  664,  663,  670,  664,  665,  665,
      666,  666,  665,  667,  667,  668,  668,  669,  669,    0,
      671,    0,  670,  670,    0,    0,  672,    0,  673,    0,
      674,    0,    0,  667,  675,  668,  671,  671,  676,  669,
        0,  670,  672,  672,  673,  673,  674,  674,  674,    0,
      675,  675,  677,    0,  676,  676,  671,  678,    0,  679,
        0,  681,    0,    0,  680,  673,    0,    0,  677,  677,
      682,    0,  683,  678,  678,  679,  679,  681,  681,  678,
      680,  680,  680,  677,    0,    0,  682,  682,  683,  683,
      684,    0,    0,  685,    0,    0,    0,  686,    0,    0,

      687,  679,  682,  688,    0,    0,  684,  684,  683,  685,
      685,    0,  684,  686,  686,  685,  687,  687,  687,  688,
      688,  692,  692,  688,  692,  697,    0,  692,    0,  692,
        0,    0,  697,  699,    0,    0,    0,    0,    0,  698,
      699,  697,  697,  692,  694,  697,  698,  694,    0,  699,
      699,    0,  694,  694,  694,  698,  698,  694,    0,  694,
        0,    0,    0,  700,    0,  694,  701,  694,  694,  694,
      700,  699,    0,  701,  702,  698,    0,  703,    0,  700,
      700,  702,  701,  701,  703,    0,    0,    0,  704,  700,
      702,  702,    0,  703,  703,  704,  694,  694,  696,  810,

        0,  696,    0,  701,  704,  704,  696,  696,  696,  703,
      705,  696,    0,  706,    0,  810,  810,  705,  704,  696,
      706,  696,  696,  696,    0,  704,  705,  705,  707,  706,
      706,  708,    0,    0,    0,  707,    0,    0,  708,  709,
      705,    0,  710,  706,  707,  707,  709,  708,  708,  710,
      696,  696,    0,  707,    0,  709,  709,  711,  710,  710,
      710,  712,    0,  814,  711,  713,    0,    0,  712,  714,
      709,    0,  713,  711,  711,    0,  714,  712,  712,  814,
      814,  713,  713,  712,  814,  714,  714,  713,  715,    0,
      716,    0,  717,    0,  812,  715,  718,  716,    0,  717,

        0,  714,    0,  718,  715,  715,  716,  716,  717,  717,
      812,  812,  718,  718,  718,  719,  812,  720,    0,  721,
        0,  715,  719,    0,  720,  815,  721,  716,    0,    0,
      717,  719,  719,  720,  720,  721,  721,    0,  722,    0,
      725,  815,  815,  723,  719,  722,  724,  725,    0,    0,
      723,  815,    0,  724,  722,  722,  725,  725,  720,  723,
      723,  723,  724,  724,  726,    0,  727,  724,    0,  728,
        0,  726,  729,  727,    0,  816,  728,    0,    0,  729,
      726,  726,  727,  727,  726,  728,  728,    0,  729,  729,
      730,  816,  816,  731,  729,    0,    0,  730,  727,  728,

      731,  732,    0,    0,  735,    0,  730,  730,  732,  731,
      731,  735,  730,    0,    0,  733,    0,  732,  732,  734,
      735,  735,  733,  813,    0,    0,  734,  736,    0,    0,
      731,  733,  733,  735,  736,  734,  734,  732,    0,  813,
      813,  733,  813,  736,  736,  737,    0,  738,    0,    0,
      739,  737,  737,    0,  738,    0,  734,  739,    0,  736,
        0,  737,  737,  738,  738,    0,  739,  739,    0,  743,
      743,  738,  743,    0,    0,  743,    0,  743,    0,    0,
      817,  754,  754,    0,  754,    0,    0,  754,    0,  754,
        0,  743,  745,  818,    0,  745,  817,  817,    0,    0,

      745,  745,  745,  754,  759,  745,    0,  745,    0,  818,
      818,  759,  760,  745,    0,  745,  745,  745,  825,  760,
      759,  759,    0,  762,  759,  761,    0,    0,  760,  760,
      762,  763,  761,    0,  825,  825,  765,    0,  763,  762,
      762,  761,  761,  765,  745,  745,  747,  763,  763,  747,
      760,  761,  765,  765,  747,  747,  747,  764,  765,  747,
      762,  766,    0,  763,  764,  820,    0,  747,  766,  747,
      747,  747,  767,  764,  764,  764,    0,  766,  766,  767,
      768,  820,  820,  766,    0,  770,    0,  768,  767,  767,
      811,    0,  770,    0,  820,    0,  768,  768,  747,  747,

      756,  770,  770,  756,    0,  767,  811,  811,  756,  756,
      756,  769,  811,  756,    0,  756,  826,  768,  769,    0,
        0,  756,  811,  756,  756,  756,  770,  769,  769,  769,
      771,    0,  826,  826,  772,    0,  826,  771,    0,    0,
        0,  772,    0,  819,    0,    0,  771,  771,  771,  773,
      772,  772,  756,  756,  758,  772,  773,  758,    0,  819,
      819,    0,  758,  758,  758,  773,  773,  758,    0,  773,
      827,    0,    0,  774,  819,  758,  775,  758,  758,  758,
      774,    0,    0,  775,  776,    0,  827,  827,  777,  774,
      774,  776,  775,  775,    0,  777,  835,    0,  775,    0,

      776,  776,  778,  774,  777,  777,  758,  758,    0,  778,
      787,    0,  835,  835,  777,    0,  821,  787,  778,  778,
      822,  776,  782,  782,  789,  782,  787,  787,  782,    0,
      782,  789,  821,  821,    0,  790,  822,  822,  822,  778,
      789,  789,  790,    0,  782,  784,  787,  821,  784,    0,
        0,  790,  790,  784,  784,  784,  791,    0,  784,    0,
      784,    0,    0,  791,  792,  790,  784,  794,  784,  784,
      784,  792,  791,  791,  794,  793,    0,    0,  795,    0,
      792,  792,  793,  794,  794,  795,  791,  829,    0,  792,
        0,  793,  793,    0,  795,  795,    0,  784,  784,  786,

      795,    0,  786,  829,  829,  794,  793,  786,  786,  786,
      796,    0,  786,  829,  797,    0,    0,  796,  798,    0,
      786,  797,  786,  786,  786,  798,  796,  796,  823,    0,
      797,  797,  799,    0,  798,  798,    0,    0,    0,  799,
        0,    0,  824,  797,  823,  823,  796,  830,  799,  799,
      798,  786,  786,    0,  800,  800,  799,  800,  824,  824,
      800,    0,  800,  830,  830,  823,  804,  804,  830,  804,
        0,    0,  804,  824,  804,    0,  800,  803,  831,    0,
      803,    0,    0,    0,    0,  803,  803,  803,  804,    0,
      803,  833,  807,  807,  831,  831,  807,    0,  803,  831,

      803,  803,  803,  828,  807,  832,  807,  833,  833,    0,
      809,  809,    0,  809,    0,    0,  809,    0,  809,  828,
      828,  832,  832,    0,    0,  828,  836,  832,  833,  803,
      803,  806,  809,  834,  806,  807,  807,    0,    0,  806,
      806,  806,  836,  836,  806,  838,    0,  836,  837,  834,
      834,  839,  806,  840,  806,  806,  806,  841,    0,  834,
      842,  838,  838,  843,  837,  837,    0,  839,  839,  840,
      840,    0,  845,  841,  841,  844,  842,  842,  846,  843,
      843,    0,  842,  806,  806,    0,  837,  839,  845,  845,
        0,  844,  844,  847,  846,  846,    0,    0,  841,  848,

        0,  845,  849,  843,  850,    0,  844,  851,    0,  847,
      847,    0,    0,  846,    0,  848,  848,    0,  849,  849,
      850,  850,  852,  851,  851,  853,    0,  851,  854,  847,
      847,  855,    0,  850,    0,  856,    0,    0,  852,  852,
        0,  853,  853,  857,  854,  854,  858,  855,  855,  859,
      854,  856,  856,  855,    0,    0,  853,  860,    0,  857,
      857,  861,  858,  858,  856,  859,  859,  862,    0,    0,
        0,  858,  863,  860,  860,  864,    0,  861,  861,  860,
      857,    0,    0,  862,  862,  865,  859,  862,  863,  863,
      866,  864,  864,  867,    0,    0,  868,    0,  863,  869,

        0,  865,  865,  870,    0,  871,  866,  866,    0,  867,
      867,  865,  868,  868,  872,  869,  869,  867,    0,  870,
      870,  871,  871,  873,    0,  866,  874,    0,  875,    0,
      872,  872,  876,    0,  870,    0,    0,    0,  981,  873,
      873,  871,  874,  874,  875,  875,    0,    0,  876,  876,
      877,  877,  988,  877,  981,  981,  877,  876,  877,  878,
      878,  878,  878,  875,    0,  878,  884,  884,  988,  988,
      884,    0,  877,  879,  988,    0,  879,    0,  884,    0,
      884,  879,  879,  879,  880,  880,  879,  880,  879,    0,
      880,    0,  880,    0,  879,    0,  879,  879,  879,  886,

      886,  888,  886,    0,    0,  886,  880,  886,  888,  884,
      884,    0,  887,    0,    0,    0,  889,  888,  888,  887,
        0,  886,    0,  889,    0,  879,  879,  883,  887,  887,
      883,    0,  889,  889,    0,  883,  883,  883,  887,  890,
      883,    0,  891,    0,    0,    0,  890,    0,  883,  891,
      883,  883,  883,  889,  892,  890,  890,  893,  891,  891,
        0,  892,    0,  890,  893,    0,  921,  921,  921,  921,
      892,  892,  921,  893,  893,    0,  894,  891,    0,  883,
      883,  885,  893,  894,  885,    0,    0,    0,    0,  885,
      885,  885,  894,  894,  885,    0,  885,  894,    0,    0,

      895,    0,  885,  897,  885,  885,  885,  895,  896,    0,
      897,  898,    0,    0,  899,  896,  895,  895,  898,  897,
      897,  899,    0,    0,  896,  896,    0,  898,  898,    0,
      899,  899,    0,  885,  885,  900,    0,  895,  897,  896,
        0,  901,  900,  898,    0,    0,  899,  902,  901,  903,
        0,  900,  900,  904,  902,    0,  903,  901,  901,    0,
      904,  900,  901,  902,  902,  903,  903,    0,    0,  904,
      904,  905,    0,  906,    0,    0,  907,    0,  905,    0,
      906,    0,    0,  907,  902,    0,    0,  905,  905,  906,
      906,  906,  907,  907,  908,  905,    0,    0,  909,    0,

      910,  908,  911,    0,    0,  909,    0,  910,    0,  911,
      908,  908,    0,  907,  909,  909,  910,  910,  911,  911,
      912,  910,  911,    0,  913,    0,  908,  912,  914,    0,
      909,  913,  915,    0,    0,  914,  912,  912,    0,  915,
      913,  913,    0,  916,  914,  914,  914,    0,  915,  915,
      916,  917,    0,  983,  915,  918,    0,  919,  917,  916,
      916,  916,  918,    0,  919,    0,    0,  917,  917,  983,
      983,  918,  918,  919,  919,  920,  920,    0,  920,    0,
      918,  920,    0,  920,    0,    0,  917,  923,  923,  983,
      923,    0,    0,  923,    0,  923,    0,  920,  922,    0,

      984,  922,    0,    0,    0,    0,  922,  922,  922,  923,
        0,  922,    0,  922,  927,  927,  984,  984,  927,  922,
        0,  922,  922,  922,  929,  929,  927,  929,  927,    0,
      929,    0,  929,    0,  930,  930,    0,  930,  984,    0,
      930,    0,  930,    0,    0,    0,  929,  942,    0,    0,
      922,  922,  926,    0,  942,  926,  930,  927,  927,    0,
      926,  926,  926,  942,  942,  926,  931,  931,  931,  931,
        0,  942,  931,  926,    0,  926,  926,  926,  933,  933,
        0,  933,    0,    0,  933,    0,  933,    0,    0,  937,
      937,  939,  939,  937,  939,  945,    0,  939,    0,  939,

      933,  937,  945,  937,  926,  926,  928,  982,    0,  928,
        0,  945,  945,  939,  928,  928,  928,    0,  940,  928,
        0,  928,    0,  982,  982,  940,  945,  928,    0,  928,
      928,  928,  937,  937,  940,  940,  943,    0,    0,  941,
        0,    0,  982,  943,  940,  985,  941,    0,  997,    0,
      944,    0,  943,  943,    0,  941,  941,  944,  928,  928,
      932,  985,  985,  932,  997,  997,  944,  944,  932,  932,
      932,  943,  946,  932,  986,  932,  941,  985,    0,  946,
      990,  932,    0,  932,  932,  932,  947,  944,  946,  946,
      986,  986,    0,  947,  948,    0,  990,  990,    0,  949,

        0,  948,  947,  947,    0,  986,  949,  946,    0,  990,
      948,  948,  932,  932,  934,  949,  949,  934,  947,    0,
      948,    0,  934,  934,  934,  950,    0,  934,    0,  934,
        0,    0,  950,    0,    0,  934,  949,  934,  934,  934,
      951,  950,  950,  952,    0,  955,    0,  951,  954,  950,
      952,    0,  955,    0,    0,  954,  951,  951,  951,  952,
      952,  955,  955,  955,  954,  954,  934,  934,  936,  954,
        0,  936,    0,    0,    0,    0,  936,  936,  936,  953,
      952,  936,    0,  956,    0,    0,  953,    0,    0,  936,
      956,  936,  936,  936,    0,  953,  953,    0,    0,  956,

      956,  957,  957,    0,  957,  956,    0,  957,    0,  957,
      972,  953,  958,  958,  958,  958,    0,  972,  958,    0,
      936,  936,  938,  957,    0,  938,  972,  972,  972,    0,
      938,  938,  938,  960,  960,  938,  960,  938,    0,  960,
        0,  960,    0,  938,    0,  938,  938,  938,    0,  964,
      964,  966,  966,  964,  966,  960,    0,  966,    0,  966,
        0,  964,    0,  964,    0,  967,    0,    0,    0,    0,
        0,    0,  967,  966,  938,  938,  959,    0,    0,  959,
        0,  967,  967,    0,  959,  959,  959,  967,  968,  959,
      987,  959,  964,  964,    0,  968,    0,  959,  989,  959,

      959,  959,  969,    0,  968,  968,  987,  987,  991,  969,
      970,  987,    0,  968,  989,  989,    0,  970,  969,  969,
      989,    0,    0,  969,  991,  991,  970,  970,  959,  959,
      961,  970,    0,  961,  991,    0,    0,    0,  961,  961,
      961,  971,    0,  961,    0,  961,    0,    0,  971,    0,
        0,  961,    0,  961,  961,  961,  973,  971,  971,  974,
      974,  971,  974,  973,    0,  974,    0,  974,  975,  975,
      975,  975,  973,  973,  975,    0,  976,  976,    0,    0,
      976,  974,  961,  961,  963,    0,    0,  963,  976,    0,
      976,  973,  963,  963,  963,  978,  978,  963,  978,    0,

        0,  978,    0,  978,    0,  963,    0,  963,  963,  963,
      979,  979,  992,  979,  994,    0,  979,  978,  979,  976,
      976,  980,  980,  980,  980,    0,  998,  980,  992,  992,
      994,  994,  979,    0,  994,    0,  963,  963,  965,  995,
        0,  965,  998,  998,    0,    0,  965,  965,  965,  993,
      992,  965,  996,  965,    0,  995,  995,  998,    0,  965,
        0,  965,  965,  965,  999,  993,  993, 1000,  996,  996,
     1003,  993, 1001,    0,  996,    0,  995,    0,    0,    0,
      999,  999, 1004, 1000, 1000,    0, 1003, 1003, 1001, 1001,
      965,  965,  977, 1002, 1001,  977,    0,    0, 1004, 1004,

      977,  977,  977, 1005, 1000,  977, 1006,    0,    0, 1002,
     1002, 1007,    0,  977, 1008,  977,  977,  977, 1009, 1005,
     1005, 1010, 1006, 1006, 1002, 1011,    0, 1007, 1007,    0,
     1008, 1008, 1012, 1007, 1009, 1009, 1013, 1010, 1010, 1005,
     1008, 1011, 1011, 1014,  977,  977, 1015,    0, 1012, 1012,
     1011, 1016, 1013, 1013, 1012, 1017,    0,    0, 1018, 1014,
     1014, 1014, 1015, 1015,    0, 1019,    0, 1016, 1016, 1020,
        0, 1017, 1017, 1013, 1018, 1018, 1021,    0,    0, 1022,
     1018, 1019, 1019, 1023,    0, 1020, 1020, 1024,    0, 1025,
        0, 1026, 1021, 1021, 1021, 1022, 1022, 1027,    0, 1023,

     1023, 1022, 1029, 1024, 1024, 1025, 1025, 1026, 1026,    0,
     1028,    0, 1030, 1027, 1027,    0,    0,    0, 1029, 1029,
     1023,    0,    0, 1043, 1024,    0, 1028, 1028, 1030, 1030,
     1043, 1025, 1028,    0, 1027, 1031, 1031, 1029, 1031, 1043,
     1043, 1031,    0, 1031, 1032, 1032, 1032, 1032, 1033, 1033,
     1032, 1040, 1033, 1035, 1035,    0, 1035, 1031, 1040, 1035,
     1033, 1035, 1033, 1036, 1036,    0, 1036, 1040, 1040, 1036,
        0, 1036,    0,    0,    0, 1035, 1037, 1037, 1037, 1037,
     1038,    0, 1037, 1039,    0, 1036, 1041, 1038, 1042, 1040,
     1039, 1033, 1033, 1041,    0, 1042, 1038, 1038, 1038, 1039,

     1039, 1039, 1041, 1041, 1042, 1042, 1044,    0,    0, 1045,
        0, 1046,    0, 1044, 1042,    0, 1045,    0, 1046,    0,
        0,    0, 1044, 1044, 1041, 1045, 1045, 1046, 1046, 1047,
        0, 1048,    0, 1049,    0, 1050, 1047,    0, 1048, 1046,
     1049,    0, 1050,    0,    0, 1047, 1047, 1048, 1048, 1049,
     1049, 1050, 1050, 1051,    0, 1052,    0, 1050,    0, 1049,
     1051,    0, 1052,    0,    0,    0, 1047, 1053, 1048, 1051,
     1051, 1052, 1052, 1054, 1053, 1051,    0,    0, 1055,    0,
     1054, 1056,    0, 1053, 1053, 1055,    0,    0, 1056, 1054,
     1054,    0, 1052, 1057, 1055, 1055,    0, 1056, 1056, 1058,

     1057, 1054,    0, 1056,    0, 1059, 1058, 1060,    0, 1057,
     1057,    0, 1059, 1055, 1060, 1058, 1058,    0, 1061,    0,
     1062, 1059, 1059, 1060, 1060, 1061,    0, 1062, 1058, 1059,
     1057,    0,    0,    0, 1061, 1061, 1062, 1062, 1063, 1063,
        0, 1063,    0, 1060, 1063,    0, 1063, 1064, 1064, 1064,
     1064,    0, 1062, 1064,    0, 1061,    0, 1065, 1065,    0,
     1063, 1065, 1067, 1067,    0, 1067, 1106,    0, 1067, 1065,
     1067, 1065, 1068, 1068,    0, 1068,    0,    0, 1068,    0,
     1068,    0, 1106, 1106, 1067, 1069, 1069, 1069, 1069, 1070,
     1070, 1069, 1070,    0, 1068, 1070,    0, 1070,    0,    0,

     1065, 1065, 1071, 1071, 1071, 1071, 1072, 1072, 1071,    0,
     1072, 1070,    0, 1074, 1074,    0, 1074,    0, 1072, 1074,
     1072, 1074, 1075, 1075,    0, 1075, 1107,    0, 1075, 1077,
     1075, 1076, 1076, 1076, 1076, 1074, 1077, 1076,    0,    0,
        0, 1078, 1107, 1107, 1075, 1077, 1077, 1077, 1078, 1072,
     1072,    0,    0, 1079,    0, 1080,    0, 1078, 1078, 1078,
     1079, 1081, 1080, 1107, 1109,    0, 1082,    0, 1081, 1079,
     1079, 1080, 1080, 1082,    0,    0,    0, 1081, 1081, 1083,
     1109, 1109, 1082, 1082,    0,    0, 1083,    0,    0,    0,
     1084, 1079, 1085, 1080,    0, 1083, 1083, 1084, 1081, 1085,

        0, 1083,    0, 1082, 1086,    0, 1084, 1084, 1085, 1085,
     1087, 1086, 1084, 1091, 1091, 1091, 1091, 1087, 1088, 1091,
     1086, 1086,    0,    0, 1089, 1088, 1087, 1087,    0, 1085,
        0, 1089, 1087,    0, 1088, 1088,    0,    0,    0, 1086,
     1089, 1089, 1108, 1090, 1090,    0, 1090, 1088, 1089, 1090,
        0, 1090, 1092, 1092, 1094, 1094, 1092, 1094, 1108, 1108,
     1094,    0, 1094,    0, 1092, 1090, 1092, 1095, 1095,    0,
     1095,    0,    0, 1095, 1097, 1095, 1094, 1096, 1096, 1096,
     1096, 1097, 1108, 1096,    0, 1098,    0, 1099,    0, 1095,
     1097, 1097, 1098,    0, 1099, 1092, 1092,    0, 1100,    0,

     1101, 1098, 1098, 1099, 1099, 1100,    0, 1101,    0,    0,
     1097, 1098, 1102, 1099, 1100, 1100, 1101, 1101,    0, 1102,
     1104, 1104, 1104, 1104, 1103, 1103, 1104, 1103, 1102, 1102,
     1103, 1105, 1103,    0, 1110, 1100, 1101, 1111,    0, 1112,
        0,    0, 1113,    0, 1114,    0, 1103, 1105, 1105, 1102,
     1110, 1110,    0, 1111, 1111, 1112, 1112, 1105, 1113, 1113,
     1114, 1114, 1115,    0, 1116,    0, 1114, 1117, 1111, 1110,
     1118,    0,    0, 1105, 1113, 1119,    0, 1120, 1115, 1115,
     1116, 1116,    0, 1117, 1117,    0, 1118, 1118, 1121, 1117,
     1122, 1119, 1119, 1120, 1120,    0, 1123, 1119, 1124, 1120,

     1125, 1116, 1126,    0, 1121, 1121, 1122, 1122,    0, 1127,
        0, 1122, 1123, 1123, 1124, 1124, 1125, 1125, 1126, 1126,
     1128,    0, 1129,    0, 1126, 1127, 1127,    0, 1130,    0,
     1131,    0, 1132,    0,    0,    0, 1128, 1128, 1129, 1129,
     1133,    0, 1134, 1125, 1130, 1130, 1131, 1131, 1132, 1132,
     1135, 1129, 1136,    0, 1137,    0, 1133, 1133, 1134, 1134,
     1138,    0, 1133,    0,    0, 1131, 1135, 1135, 1136, 1136,
     1137, 1137,    0,    0,    0,    0, 1138, 1138, 1139, 1139,
     1134, 1139,    0,    0, 1139,    0, 1139,    0, 1136,    0,
     1141,    0, 1138, 1140, 1140, 1140, 1140, 1141, 1142, 1140,

     1139, 1143,    0, 1144,    0, 1142, 1141, 1141, 1143, 1145,
     1144,    0,    0, 1187, 1142, 1142, 1145, 1143, 1143, 1144,
     1144, 1146,    0, 1144,    0, 1145, 1145, 1141, 1146, 1187,
     1187,    0, 1147,    0, 1148, 1142, 1143, 1146, 1146, 1147,
     1145, 1148,    0,    0, 1184,    0, 1149,    0, 1147, 1147,
     1148, 1148, 1150, 1149, 1147,    0,    0,    0, 1151, 1150,
     1184, 1184, 1149, 1149, 1152, 1151, 1184,    0, 1150, 1150,
        0, 1152, 1153, 1150, 1151, 1151, 1148, 1149, 1154, 1153,
     1152, 1152, 1152, 1155,    0, 1154, 1156,    0, 1153, 1153,
     1155, 1157,    0, 1156, 1154, 1154,    0,    0, 1157, 1155,

     1155,    0, 1156, 1156,    0,    0, 1158, 1157, 1157, 1159,
        0, 1154, 1156, 1158, 1155,    0, 1159, 1160,    0,    0,
     1161,    0, 1158, 1158, 1160, 1159, 1159, 1161,    0, 1163,
     1163, 1163, 1163, 1160, 1160, 1163, 1161, 1161, 1162, 1162,
        0, 1162,    0,    0, 1162, 1159, 1162,    0, 1158,    0,
        0,    0, 1161, 1160,    0, 1164, 1164,    0, 1164,    0,
     1162, 1164, 1166, 1164, 1165, 1165, 1165, 1165, 1167, 1166,
     1165,    0,    0, 1168,    0, 1167, 1169, 1164, 1166, 1166,
     1168, 1170,    0, 1169, 1167, 1167,    0,    0, 1170, 1168,
     1168,    0, 1169, 1169, 1171,    0, 1169, 1170, 1170, 1166,

     1172, 1171, 1173, 1170,    0, 1167, 1174, 1172, 1168, 1173,
     1171, 1171,    0, 1174,    0,    0, 1172, 1172, 1173, 1173,
     1173, 1172, 1174, 1174, 1175,    0, 1176,    0,    0, 1177,
     1177, 1175, 1177, 1176,    0, 1177, 1171, 1177,    0, 1174,
     1175, 1175, 1176, 1176, 1178, 1178, 1178, 1178,    0, 1179,
     1178, 1177,    0, 1180,    0, 1175, 1179, 1181,    0,    0,
     1180,    0,    0,    0, 1181, 1179, 1179,    0, 1176, 1180,
     1180, 1182,    0, 1181, 1181, 1183,    0, 1185, 1182, 1186,
     1179, 1188, 1183, 1181, 1180, 1189,    0, 1182, 1182, 1190,
        0, 1183, 1183, 1185, 1185, 1186, 1186, 1188, 1188, 1185,

        0, 1189, 1189, 1191,    0, 1190, 1190, 1182, 1192,    0,
     1186, 1183, 1193,    0, 1194,    0, 1189,    0, 1188, 1191,
     1191, 1195,    0,    0, 1192, 1192, 1196,    0, 1193, 1193,
     1194, 1194,    0, 1193, 1197,    0, 1198, 1195, 1195, 1195,
     1199,    0, 1196, 1196,    0, 1200,    0, 1201, 1196, 1202,
     1197, 1197, 1198, 1198,    0, 1203, 1199, 1199,    0,    0,
     1199, 1200, 1200, 1201, 1201, 1202, 1202,    0,    0, 1206,
     1197, 1203, 1203, 1204,    0, 1205, 1206,    0,    0,    0,
     1204, 1207, 1205,    0, 1201, 1206, 1206, 1206, 1207, 1204,
     1204, 1205, 1205, 1208,    0, 1203, 1209, 1207, 1207, 1204,

     1208, 1205,    0, 1209, 1210,    0,    0,    0, 1211, 1208,
     1208, 1210, 1209, 1209, 1210, 1211,    0, 1208, 1207, 1212,
     1210, 1210, 1213,    0, 1211, 1211, 1212, 1209,    0, 1213,
     1214,    0, 1211, 1215,    0, 1212, 1212, 1214, 1213, 1213,
     1215, 1216,    0,    0, 1217,    0, 1214, 1214, 1216, 1215,
     1215, 1217, 1218, 1215,    0, 1214,    0, 1216, 1216, 1218,
     1217, 1217,    0, 1219,    0,    0, 1220,    0, 1218, 1218,
     1219, 1221, 1216, 1220, 1218,    0,    0,    0, 1221, 1219,
     1219,    0, 1220, 1220, 1222,    0, 1223, 1221, 1221, 1224,
        0, 1222, 1225, 1223, 1220,    0, 1224, 1221,    0, 1225,

     1222, 1222, 1223, 1223, 1223, 1224, 1224,    0, 1225, 1225,
     1222, 1226,    0, 1227,    0, 1228,    0, 1229, 1226,    0,
     1227, 1226, 1228, 1225, 1229,    0, 1224, 1226, 1226, 1227,
     1227, 1228, 1228, 1229, 1229, 1228, 1230,    0, 1227, 1231,
        0, 1229, 1232, 1230,    0, 1233, 1231,    0,    0, 1232,
     1234,    0, 1230, 1230,    0, 1231, 1231, 1235, 1232, 1232,
     1230, 1233, 1233, 1236, 1232,    0, 1234, 1234, 1237,    0,
     1231, 1238,    0, 1235, 1235, 1239,    0, 1240,    0, 1236,
     1236, 1233,    0,    0, 1237, 1237, 1241, 1238, 1238,    0,
        0, 1239, 1239, 1240, 1240, 1242,    0, 1243,    0, 1236,

     1244,    0, 1241, 1241,    0,    0, 1239,    0, 1241,    0,
        0, 1242, 1242, 1243, 1243, 1245, 1244, 1244, 1246,    0,
     1242, 1247, 1245, 1243, 1266, 1246, 1249,    0, 1247, 1248,
        0, 1245, 1245, 1249, 1246, 1246, 1248, 1247, 1247,    0,
     1266, 1266, 1249, 1249,    0, 1248, 1248,    0, 1250,    0,
        0, 1281,    0, 1251, 1245, 1250,    0, 1246, 1247,    0,
     1251, 1248,    0, 1249, 1250, 1250, 1252, 1281, 1281, 1251,
     1251, 1253,    0, 1252, 1250, 1251,    0, 1254, 1253, 1255,
        0,    0, 1252, 1252, 1254, 1256, 1255, 1253, 1253,    0,
     1252,    0, 1256, 1254, 1254, 1255, 1255, 1257,    0, 1258,

        0, 1256, 1256, 1259, 1257,    0, 1258, 1253,    0,    0,
     1259,    0,    0, 1257, 1257, 1258, 1258,    0, 1255, 1259,
     1259, 1260,    0,    0, 1256,    0, 1261,    0, 1260, 1262,
        0, 1258,    0, 1261, 1257,    0, 1262, 1260, 1260, 1264,
     1259, 1265, 1261, 1261, 1263, 1262, 1262, 1260, 1261, 1267,
        0, 1263, 1268, 1262,    0, 1264, 1264, 1265, 1265, 1268,
     1263, 1263,    0,    0,    0, 1267, 1267,    0, 1268, 1268,
        0, 1269,    0,    0, 1268, 1270, 1264, 1265, 1269, 1271,
     1263, 1267, 1270, 1272,    0,    0, 1271, 1269, 1269, 1288,
     1272, 1270, 1270, 1269,    0, 1271, 1271,    0,    0, 1272,

     1272, 1270, 1273,    0, 1274, 1288, 1288,    0, 1275, 1273,
     1276, 1274,    0,    0, 1271, 1275,    0, 1276, 1273, 1273,
     1274, 1274, 1273, 1277, 1275, 1275, 1276, 1276,    0,    0,
     1277, 1278, 1276,    0, 1279,    0, 1280,    0, 1278, 1277,
     1277, 1279, 1282, 1280,    0, 1277,    0, 1278, 1278,    0,
     1279, 1279, 1280, 1280, 1283,    0, 1280, 1278, 1282, 1282,
     1284, 1283,    0,    0,    0, 1285,    0, 1284, 1286, 1279,
     1283, 1283, 1285, 1282,    0, 1286, 1284, 1284,    0, 1287,
        0, 1285, 1285, 1289, 1286, 1286, 1287, 1290,    0,    0,
     1289, 1291,    0,    0, 1290, 1287, 1287, 1285, 1291, 1289,

     1289,    0,    0, 1290, 1290,    0,    0, 1291, 1291,    0,
        0, 1287,    0,    0, 1289,    0,    0,    0, 1290, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1298, 1298,    0,    0, 1298, 1298,
     1298, 1299,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1300, 1300,    0,    0, 1300, 1300, 1300, 1301,    0,

     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302, 1302,
        0,    0, 1302, 1302, 1302, 1303,    0, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1304, 1304,    0,    0, 1304,
     1304, 1304, 1305,    0, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1306, 1306,    0,    0, 1306, 1306, 1306, 1307,
        0, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308,
        0,    0,    0, 1308,    0, 1308, 1308,    0, 1308, 1308,
     1309,    0,    0, 1309, 1309,    0, 1309, 1309, 1309, 1309,
     1309, 1310, 1310,    0, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1311,    0, 1311, 1311,    0,    0, 1311,    0,

     1311, 1312, 1312, 1312, 1312, 1312,    0, 1312, 1313, 1313,
     1313, 1313, 1313,    0, 1313, 1314, 1314, 1314, 1314, 1314,
        0, 1314, 1315, 1315, 1315, 1315, 1315,    0, 1315, 1316,
     1316, 1316, 1316, 1316,    0, 1316, 1317,    0, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1317, 1318,    0,    0,    0,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319,    0, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320,    0,    0,
        0, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321,    0,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322,    0,
        0,    0, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1323,

        0,    0,    0, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1324,    0, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1325,    0,    0,    0, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1326,    0, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1327,    0,    0,    0, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1328, 1328,    0, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1329,    0,    0,    0, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1330,    0,    0,    0, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1331, 1331,    0, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1332,    0,    0,    0,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1333,    0,    0,
        0, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1334, 1334,
        0, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1335,
        0,    0,    0, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1336,    0,    0,    0, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1337,    0,    0,    0, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1338, 1338,    0, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1339,    0,    0,    0, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1340,    0,    0,    0, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1341, 1341,    0, 1341, 1341,

     1341, 1341, 1341, 1341, 1341, 1341, 1342,    0,    0,    0,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1343,    0,    0,
        0, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1344, 1344,
        0, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345,
        0,    0,    0, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1346, 1346,    0, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1347, 1347,    0, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1348,    0,    0,    0, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1349,    0,    0,    0, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1350, 1350,    0, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1351, 1351,    0,    0, 1351,
     1351, 1351, 1352, 1352,    0, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1353,    0,    0,    0, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1354,    0,    0,    0, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1355, 1355,    0, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356,    0, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1357,    0,    0,
        0, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358,
        0, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359,
        0,    0,    0, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1360,    0,    0,    0, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1361, 1361,    0, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1362, 1362,    0,    0, 1362, 1362, 1362, 1363,
     1363,    0, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1364,    0,    0,    0, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1365, 1365,    0, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1366,    0,    0,    0, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1367,    0,    0,    0, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1368, 1368,    0, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1369, 1369,    0,    0, 1369,

     1369, 1369, 1370, 1370,    0, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1371,    0,    0,    0, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1372,    0,    0,    0, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1373, 1373,    0, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374,    0, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375,    0,
        0, 1375, 1375, 1375, 1376, 1376,    0, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1377, 1377,    0, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378,    0, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379,    0,

     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2917 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3129 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1293 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8609 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_CHECK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
return KW_TEST;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
return KW_SMT_SEARCH;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 265 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 266 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 267 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 281 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 116:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 168:
YY_RULE_SETUP
#line 351 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 357 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 363 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 369 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 375 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 381 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 387 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 393 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 399 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 408 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 412 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 423 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 424 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 435 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 446 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 183:
YY_RULE_SETUP
#line 455 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 463 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 185:
YY_RULE_SETUP
#line 471 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 475 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 479 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 188:
YY_RULE_SETUP
#line 491 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 497 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 498 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 499 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 500 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 501 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 502 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 511 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 196:
YY_RULE_SETUP
#line 520 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 526 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 527 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 199:
YY_RULE_SETUP
#line 536 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 541 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 201:
YY_RULE_SETUP
#line 550 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 551 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 556 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 570 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 574 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 578 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 582 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 585 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 591 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 592 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 593 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 598 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4545 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1293 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1293 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1292);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 598 "../../../src/Mixfix/lexer.ll"



#include "lexerAux.cc"

